// automatically generated by rust-bindgen 0.72.0

pub const ALC_INVALID: u32 = 0;
pub const ALC_VERSION_0_1: u32 = 1;
pub const ALC_FALSE: u32 = 0;
pub const ALC_TRUE: u32 = 1;
pub const ALC_FREQUENCY: u32 = 4103;
pub const ALC_REFRESH: u32 = 4104;
pub const ALC_SYNC: u32 = 4105;
pub const ALC_MONO_SOURCES: u32 = 4112;
pub const ALC_STEREO_SOURCES: u32 = 4113;
pub const ALC_NO_ERROR: u32 = 0;
pub const ALC_INVALID_DEVICE: u32 = 40961;
pub const ALC_INVALID_CONTEXT: u32 = 40962;
pub const ALC_INVALID_ENUM: u32 = 40963;
pub const ALC_INVALID_VALUE: u32 = 40964;
pub const ALC_OUT_OF_MEMORY: u32 = 40965;
pub const ALC_MAJOR_VERSION: u32 = 4096;
pub const ALC_MINOR_VERSION: u32 = 4097;
pub const ALC_ATTRIBUTES_SIZE: u32 = 4098;
pub const ALC_ALL_ATTRIBUTES: u32 = 4099;
pub const ALC_DEFAULT_DEVICE_SPECIFIER: u32 = 4100;
pub const ALC_DEVICE_SPECIFIER: u32 = 4101;
pub const ALC_EXTENSIONS: u32 = 4102;
pub const ALC_EXT_CAPTURE: u32 = 1;
pub const ALC_CAPTURE_DEVICE_SPECIFIER: u32 = 784;
pub const ALC_CAPTURE_DEFAULT_DEVICE_SPECIFIER: u32 = 785;
pub const ALC_CAPTURE_SAMPLES: u32 = 786;
pub const ALC_ENUMERATE_ALL_EXT: u32 = 1;
pub const ALC_DEFAULT_ALL_DEVICES_SPECIFIER: u32 = 4114;
pub const ALC_ALL_DEVICES_SPECIFIER: u32 = 4115;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ALCdevice {
    _unused: [u8; 0]
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ALCcontext {
    _unused: [u8; 0]
}
/// 8-bit boolean
pub type ALCboolean = ::std::os::raw::c_char;
/// character
pub type ALCchar = ::std::os::raw::c_char;
/// signed 8-bit integer
pub type ALCbyte = ::std::os::raw::c_schar;
/// unsigned 8-bit integer
pub type ALCubyte = ::std::os::raw::c_uchar;
/// signed 16-bit integer
pub type ALCshort = ::std::os::raw::c_short;
/// unsigned 16-bit integer
pub type ALCushort = ::std::os::raw::c_ushort;
/// signed 32-bit integer
pub type ALCint = ::std::os::raw::c_int;
/// unsigned 32-bit integer
pub type ALCuint = ::std::os::raw::c_uint;
/// non-negative 32-bit integer size
pub type ALCsizei = ::std::os::raw::c_int;
/// 32-bit enumeration value
pub type ALCenum = ::std::os::raw::c_int;
/// 32-bit IEEE-754 floating-point
pub type ALCfloat = f32;
/// 64-bit IEEE-754 floating-point
pub type ALCdouble = f64;
/// void type (for opaque pointers only)
pub type ALCvoid = ::std::os::raw::c_void;
extern "C" {
    /// Create and attach a context to the given device.
    pub fn alcCreateContext(device: *mut ALCdevice, attrlist: *const ALCint) -> *mut ALCcontext;
}
extern "C" {
    /// Makes the given context the active process-wide context. Passing NULL clears
    /// the active context.
    pub fn alcMakeContextCurrent(context: *mut ALCcontext) -> ALCboolean;
}
extern "C" {
    /// Resumes processing updates for the given context.
    pub fn alcProcessContext(context: *mut ALCcontext);
}
extern "C" {
    /// Suspends updates for the given context.
    pub fn alcSuspendContext(context: *mut ALCcontext);
}
extern "C" {
    /// Remove a context from its device and destroys it.
    pub fn alcDestroyContext(context: *mut ALCcontext);
}
extern "C" {
    /// Returns the currently active context.
    pub fn alcGetCurrentContext() -> *mut ALCcontext;
}
extern "C" {
    /// Returns the device that a particular context is attached to.
    pub fn alcGetContextsDevice(context: *mut ALCcontext) -> *mut ALCdevice;
}
extern "C" {
    /// Opens the named playback device.
    pub fn alcOpenDevice(devicename: *const ALCchar) -> *mut ALCdevice;
}
extern "C" {
    /// Closes the given playback device.
    pub fn alcCloseDevice(device: *mut ALCdevice) -> ALCboolean;
}
extern "C" {
    /// Obtain the most recent Device error.
    pub fn alcGetError(device: *mut ALCdevice) -> ALCenum;
}
extern "C" {
    /// Query for the presence of an extension on the device. Pass a NULL device to
    /// query a device-inspecific extension.
    pub fn alcIsExtensionPresent(device: *mut ALCdevice, extname: *const ALCchar) -> ALCboolean;
}
extern "C" {
    /// Retrieve the address of a function. Given a non-NULL device, the returned
    /// function may be device-specific.
    pub fn alcGetProcAddress(device: *mut ALCdevice, funcname: *const ALCchar) -> *mut ALCvoid;
}
extern "C" {
    /// Retrieve the value of an enum. Given a non-NULL device, the returned value
    /// may be device-specific.
    pub fn alcGetEnumValue(device: *mut ALCdevice, enumname: *const ALCchar) -> ALCenum;
}
extern "C" {
    /// Returns information about the device, and error strings.
    pub fn alcGetString(device: *mut ALCdevice, param: ALCenum) -> *const ALCchar;
}
extern "C" {
    /// Returns information about the device and the version of OpenAL.
    pub fn alcGetIntegerv(
        device: *mut ALCdevice,
        param: ALCenum,
        size: ALCsizei,
        values: *mut ALCint
    );
}
extern "C" {
    /// Opens the named capture device with the given frequency, format, and buffer
    /// size.
    pub fn alcCaptureOpenDevice(
        devicename: *const ALCchar,
        frequency: ALCuint,
        format: ALCenum,
        buffersize: ALCsizei
    ) -> *mut ALCdevice;
}
extern "C" {
    /// Closes the given capture device.
    pub fn alcCaptureCloseDevice(device: *mut ALCdevice) -> ALCboolean;
}
extern "C" {
    /// Starts capturing samples into the device buffer.
    pub fn alcCaptureStart(device: *mut ALCdevice);
}
extern "C" {
    /// Stops capturing samples. Samples in the device buffer remain available.
    pub fn alcCaptureStop(device: *mut ALCdevice);
}
extern "C" {
    /// Reads samples from the device buffer.
    pub fn alcCaptureSamples(device: *mut ALCdevice, buffer: *mut ALCvoid, samples: ALCsizei);
}
pub type LPALCCREATECONTEXT = ::std::option::Option<
    unsafe extern "C" fn(device: *mut ALCdevice, attrlist: *const ALCint) -> *mut ALCcontext
>;
pub type LPALCMAKECONTEXTCURRENT =
    ::std::option::Option<unsafe extern "C" fn(context: *mut ALCcontext) -> ALCboolean>;
pub type LPALCPROCESSCONTEXT =
    ::std::option::Option<unsafe extern "C" fn(context: *mut ALCcontext)>;
pub type LPALCSUSPENDCONTEXT =
    ::std::option::Option<unsafe extern "C" fn(context: *mut ALCcontext)>;
pub type LPALCDESTROYCONTEXT =
    ::std::option::Option<unsafe extern "C" fn(context: *mut ALCcontext)>;
pub type LPALCGETCURRENTCONTEXT = ::std::option::Option<unsafe extern "C" fn() -> *mut ALCcontext>;
pub type LPALCGETCONTEXTSDEVICE =
    ::std::option::Option<unsafe extern "C" fn(context: *mut ALCcontext) -> *mut ALCdevice>;
pub type LPALCOPENDEVICE =
    ::std::option::Option<unsafe extern "C" fn(devicename: *const ALCchar) -> *mut ALCdevice>;
pub type LPALCCLOSEDEVICE =
    ::std::option::Option<unsafe extern "C" fn(device: *mut ALCdevice) -> ALCboolean>;
pub type LPALCGETERROR =
    ::std::option::Option<unsafe extern "C" fn(device: *mut ALCdevice) -> ALCenum>;
pub type LPALCISEXTENSIONPRESENT = ::std::option::Option<
    unsafe extern "C" fn(device: *mut ALCdevice, extname: *const ALCchar) -> ALCboolean
>;
pub type LPALCGETPROCADDRESS = ::std::option::Option<
    unsafe extern "C" fn(device: *mut ALCdevice, funcname: *const ALCchar) -> *mut ALCvoid
>;
pub type LPALCGETENUMVALUE = ::std::option::Option<
    unsafe extern "C" fn(device: *mut ALCdevice, enumname: *const ALCchar) -> ALCenum
>;
pub type LPALCGETSTRING = ::std::option::Option<
    unsafe extern "C" fn(device: *mut ALCdevice, param: ALCenum) -> *const ALCchar
>;
pub type LPALCGETINTEGERV = ::std::option::Option<
    unsafe extern "C" fn(
        device: *mut ALCdevice,
        param: ALCenum,
        size: ALCsizei,
        values: *mut ALCint
    )
>;
pub type LPALCCAPTUREOPENDEVICE = ::std::option::Option<
    unsafe extern "C" fn(
        devicename: *const ALCchar,
        frequency: ALCuint,
        format: ALCenum,
        buffersize: ALCsizei
    ) -> *mut ALCdevice
>;
pub type LPALCCAPTURECLOSEDEVICE =
    ::std::option::Option<unsafe extern "C" fn(device: *mut ALCdevice) -> ALCboolean>;
pub type LPALCCAPTURESTART = ::std::option::Option<unsafe extern "C" fn(device: *mut ALCdevice)>;
pub type LPALCCAPTURESTOP = ::std::option::Option<unsafe extern "C" fn(device: *mut ALCdevice)>;
pub type LPALCCAPTURESAMPLES = ::std::option::Option<
    unsafe extern "C" fn(device: *mut ALCdevice, buffer: *mut ALCvoid, samples: ALCsizei)
>;
