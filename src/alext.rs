// automatically generated by rust-bindgen 0.72.0

pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const _STL_LANG: u32 = 0;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_CXX23: u32 = 0;
pub const _HAS_CXX26: u32 = 0;
pub const _HAS_NODISCARD: u32 = 0;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub const ALC_INVALID: u32 = 0;
pub const ALC_VERSION_0_1: u32 = 1;
pub const ALC_FALSE: u32 = 0;
pub const ALC_TRUE: u32 = 1;
pub const ALC_FREQUENCY: u32 = 4103;
pub const ALC_REFRESH: u32 = 4104;
pub const ALC_SYNC: u32 = 4105;
pub const ALC_MONO_SOURCES: u32 = 4112;
pub const ALC_STEREO_SOURCES: u32 = 4113;
pub const ALC_NO_ERROR: u32 = 0;
pub const ALC_INVALID_DEVICE: u32 = 40961;
pub const ALC_INVALID_CONTEXT: u32 = 40962;
pub const ALC_INVALID_ENUM: u32 = 40963;
pub const ALC_INVALID_VALUE: u32 = 40964;
pub const ALC_OUT_OF_MEMORY: u32 = 40965;
pub const ALC_MAJOR_VERSION: u32 = 4096;
pub const ALC_MINOR_VERSION: u32 = 4097;
pub const ALC_ATTRIBUTES_SIZE: u32 = 4098;
pub const ALC_ALL_ATTRIBUTES: u32 = 4099;
pub const ALC_DEFAULT_DEVICE_SPECIFIER: u32 = 4100;
pub const ALC_DEVICE_SPECIFIER: u32 = 4101;
pub const ALC_EXTENSIONS: u32 = 4102;
pub const ALC_EXT_CAPTURE: u32 = 1;
pub const ALC_CAPTURE_DEVICE_SPECIFIER: u32 = 784;
pub const ALC_CAPTURE_DEFAULT_DEVICE_SPECIFIER: u32 = 785;
pub const ALC_CAPTURE_SAMPLES: u32 = 786;
pub const ALC_ENUMERATE_ALL_EXT: u32 = 1;
pub const ALC_DEFAULT_ALL_DEVICES_SPECIFIER: u32 = 4114;
pub const ALC_ALL_DEVICES_SPECIFIER: u32 = 4115;
pub const AL_INVALID: i32 = -1;
pub const AL_NONE: u32 = 0;
pub const AL_FALSE: u32 = 0;
pub const AL_TRUE: u32 = 1;
pub const AL_SOURCE_RELATIVE: u32 = 514;
pub const AL_CONE_INNER_ANGLE: u32 = 4097;
pub const AL_CONE_OUTER_ANGLE: u32 = 4098;
pub const AL_PITCH: u32 = 4099;
pub const AL_POSITION: u32 = 4100;
pub const AL_DIRECTION: u32 = 4101;
pub const AL_VELOCITY: u32 = 4102;
pub const AL_LOOPING: u32 = 4103;
pub const AL_BUFFER: u32 = 4105;
pub const AL_GAIN: u32 = 4106;
pub const AL_MIN_GAIN: u32 = 4109;
pub const AL_MAX_GAIN: u32 = 4110;
pub const AL_ORIENTATION: u32 = 4111;
pub const AL_SOURCE_STATE: u32 = 4112;
pub const AL_INITIAL: u32 = 4113;
pub const AL_PLAYING: u32 = 4114;
pub const AL_PAUSED: u32 = 4115;
pub const AL_STOPPED: u32 = 4116;
pub const AL_BUFFERS_QUEUED: u32 = 4117;
pub const AL_BUFFERS_PROCESSED: u32 = 4118;
pub const AL_REFERENCE_DISTANCE: u32 = 4128;
pub const AL_ROLLOFF_FACTOR: u32 = 4129;
pub const AL_CONE_OUTER_GAIN: u32 = 4130;
pub const AL_MAX_DISTANCE: u32 = 4131;
pub const AL_SEC_OFFSET: u32 = 4132;
pub const AL_SAMPLE_OFFSET: u32 = 4133;
pub const AL_BYTE_OFFSET: u32 = 4134;
pub const AL_SOURCE_TYPE: u32 = 4135;
pub const AL_STATIC: u32 = 4136;
pub const AL_STREAMING: u32 = 4137;
pub const AL_UNDETERMINED: u32 = 4144;
pub const AL_FORMAT_MONO8: u32 = 4352;
pub const AL_FORMAT_MONO16: u32 = 4353;
pub const AL_FORMAT_STEREO8: u32 = 4354;
pub const AL_FORMAT_STEREO16: u32 = 4355;
pub const AL_FREQUENCY: u32 = 8193;
pub const AL_BITS: u32 = 8194;
pub const AL_CHANNELS: u32 = 8195;
pub const AL_SIZE: u32 = 8196;
pub const AL_UNUSED: u32 = 8208;
pub const AL_PENDING: u32 = 8209;
pub const AL_PROCESSED: u32 = 8210;
pub const AL_NO_ERROR: u32 = 0;
pub const AL_INVALID_NAME: u32 = 40961;
pub const AL_INVALID_ENUM: u32 = 40962;
pub const AL_INVALID_VALUE: u32 = 40963;
pub const AL_INVALID_OPERATION: u32 = 40964;
pub const AL_OUT_OF_MEMORY: u32 = 40965;
pub const AL_VENDOR: u32 = 45057;
pub const AL_VERSION: u32 = 45058;
pub const AL_RENDERER: u32 = 45059;
pub const AL_EXTENSIONS: u32 = 45060;
pub const AL_DOPPLER_FACTOR: u32 = 49152;
pub const AL_DOPPLER_VELOCITY: u32 = 49153;
pub const AL_SPEED_OF_SOUND: u32 = 49155;
pub const AL_DISTANCE_MODEL: u32 = 53248;
pub const AL_INVERSE_DISTANCE: u32 = 53249;
pub const AL_INVERSE_DISTANCE_CLAMPED: u32 = 53250;
pub const AL_LINEAR_DISTANCE: u32 = 53251;
pub const AL_LINEAR_DISTANCE_CLAMPED: u32 = 53252;
pub const AL_EXPONENT_DISTANCE: u32 = 53253;
pub const AL_EXPONENT_DISTANCE_CLAMPED: u32 = 53254;
pub const AL_LOKI_IMA_ADPCM_format: u32 = 1;
pub const AL_FORMAT_IMA_ADPCM_MONO16_EXT: u32 = 65536;
pub const AL_FORMAT_IMA_ADPCM_STEREO16_EXT: u32 = 65537;
pub const AL_LOKI_WAVE_format: u32 = 1;
pub const AL_FORMAT_WAVE_EXT: u32 = 65538;
pub const AL_EXT_vorbis: u32 = 1;
pub const AL_FORMAT_VORBIS_EXT: u32 = 65539;
pub const AL_LOKI_quadriphonic: u32 = 1;
pub const AL_FORMAT_QUAD8_LOKI: u32 = 65540;
pub const AL_FORMAT_QUAD16_LOKI: u32 = 65541;
pub const AL_EXT_float32: u32 = 1;
pub const AL_FORMAT_MONO_FLOAT32: u32 = 65552;
pub const AL_FORMAT_STEREO_FLOAT32: u32 = 65553;
pub const AL_EXT_double: u32 = 1;
pub const AL_FORMAT_MONO_DOUBLE_EXT: u32 = 65554;
pub const AL_FORMAT_STEREO_DOUBLE_EXT: u32 = 65555;
pub const AL_EXT_MULAW: u32 = 1;
pub const AL_FORMAT_MONO_MULAW_EXT: u32 = 65556;
pub const AL_FORMAT_STEREO_MULAW_EXT: u32 = 65557;
pub const AL_EXT_ALAW: u32 = 1;
pub const AL_FORMAT_MONO_ALAW_EXT: u32 = 65558;
pub const AL_FORMAT_STEREO_ALAW_EXT: u32 = 65559;
pub const ALC_LOKI_audio_channel: u32 = 1;
pub const ALC_CHAN_MAIN_LOKI: u32 = 5242881;
pub const ALC_CHAN_PCM_LOKI: u32 = 5242882;
pub const ALC_CHAN_CD_LOKI: u32 = 5242883;
pub const AL_EXT_MCFORMATS: u32 = 1;
pub const AL_FORMAT_QUAD8: u32 = 4612;
pub const AL_FORMAT_QUAD16: u32 = 4613;
pub const AL_FORMAT_QUAD32: u32 = 4614;
pub const AL_FORMAT_REAR8: u32 = 4615;
pub const AL_FORMAT_REAR16: u32 = 4616;
pub const AL_FORMAT_REAR32: u32 = 4617;
pub const AL_FORMAT_51CHN8: u32 = 4618;
pub const AL_FORMAT_51CHN16: u32 = 4619;
pub const AL_FORMAT_51CHN32: u32 = 4620;
pub const AL_FORMAT_61CHN8: u32 = 4621;
pub const AL_FORMAT_61CHN16: u32 = 4622;
pub const AL_FORMAT_61CHN32: u32 = 4623;
pub const AL_FORMAT_71CHN8: u32 = 4624;
pub const AL_FORMAT_71CHN16: u32 = 4625;
pub const AL_FORMAT_71CHN32: u32 = 4626;
pub const AL_EXT_MULAW_MCFORMATS: u32 = 1;
pub const AL_FORMAT_MONO_MULAW: u32 = 65556;
pub const AL_FORMAT_STEREO_MULAW: u32 = 65557;
pub const AL_FORMAT_QUAD_MULAW: u32 = 65569;
pub const AL_FORMAT_REAR_MULAW: u32 = 65570;
pub const AL_FORMAT_51CHN_MULAW: u32 = 65571;
pub const AL_FORMAT_61CHN_MULAW: u32 = 65572;
pub const AL_FORMAT_71CHN_MULAW: u32 = 65573;
pub const AL_EXT_IMA4: u32 = 1;
pub const AL_FORMAT_MONO_IMA4: u32 = 4864;
pub const AL_FORMAT_STEREO_IMA4: u32 = 4865;
pub const AL_EXT_STATIC_BUFFER: u32 = 1;
pub const ALC_EXT_EFX: u32 = 1;
pub const _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE: u32 = 1;
pub const _CRT_BUILD_DESKTOP_APP: u32 = 1;
pub const _ARGMAX: u32 = 100;
pub const _CRT_INT_MAX: u32 = 2147483647;
pub const _CRT_FUNCTIONS_REQUIRED: u32 = 1;
pub const _CRT_HAS_CXX17: u32 = 0;
pub const _CRT_HAS_C11: u32 = 1;
pub const _CRT_INTERNAL_NONSTDC_NAMES: u32 = 1;
pub const __STDC_SECURE_LIB__: u32 = 200411;
pub const __GOT_SECURE_LIB__: u32 = 200411;
pub const __STDC_WANT_SECURE_LIB__: u32 = 1;
pub const _SECURECRT_FILL_BUFFER_PATTERN: u32 = 254;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES: u32 = 1;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY: u32 = 0;
pub const FLT_EVAL_METHOD: u32 = 0;
pub const DBL_DECIMAL_DIG: u32 = 17;
pub const DBL_DIG: u32 = 15;
pub const DBL_HAS_SUBNORM: u32 = 1;
pub const DBL_MANT_DIG: u32 = 53;
pub const DBL_MAX_10_EXP: u32 = 308;
pub const DBL_MAX_EXP: u32 = 1024;
pub const DBL_MIN_10_EXP: i32 = -307;
pub const DBL_MIN_EXP: i32 = -1021;
pub const _DBL_RADIX: u32 = 2;
pub const FLT_DECIMAL_DIG: u32 = 9;
pub const FLT_DIG: u32 = 6;
pub const FLT_HAS_SUBNORM: u32 = 1;
pub const FLT_GUARD: u32 = 0;
pub const FLT_MANT_DIG: u32 = 24;
pub const FLT_MAX_10_EXP: u32 = 38;
pub const FLT_MAX_EXP: u32 = 128;
pub const FLT_MIN_10_EXP: i32 = -37;
pub const FLT_MIN_EXP: i32 = -125;
pub const FLT_NORMALIZE: u32 = 0;
pub const FLT_RADIX: u32 = 2;
pub const LDBL_DIG: u32 = 15;
pub const LDBL_HAS_SUBNORM: u32 = 1;
pub const LDBL_MANT_DIG: u32 = 53;
pub const LDBL_MAX_10_EXP: u32 = 308;
pub const LDBL_MAX_EXP: u32 = 1024;
pub const LDBL_MIN_10_EXP: i32 = -307;
pub const LDBL_MIN_EXP: i32 = -1021;
pub const _LDBL_RADIX: u32 = 2;
pub const DECIMAL_DIG: u32 = 17;
pub const _SW_INEXACT: u32 = 1;
pub const _SW_UNDERFLOW: u32 = 2;
pub const _SW_OVERFLOW: u32 = 4;
pub const _SW_ZERODIVIDE: u32 = 8;
pub const _SW_INVALID: u32 = 16;
pub const _SW_DENORMAL: u32 = 524288;
pub const _EM_AMBIGUIOUS: u32 = 2147483648;
pub const _EM_AMBIGUOUS: u32 = 2147483648;
pub const _MCW_EM: u32 = 524319;
pub const _EM_INEXACT: u32 = 1;
pub const _EM_UNDERFLOW: u32 = 2;
pub const _EM_OVERFLOW: u32 = 4;
pub const _EM_ZERODIVIDE: u32 = 8;
pub const _EM_INVALID: u32 = 16;
pub const _EM_DENORMAL: u32 = 524288;
pub const _MCW_RC: u32 = 768;
pub const _RC_NEAR: u32 = 0;
pub const _RC_DOWN: u32 = 256;
pub const _RC_UP: u32 = 512;
pub const _RC_CHOP: u32 = 768;
pub const _MCW_PC: u32 = 196608;
pub const _PC_64: u32 = 0;
pub const _PC_53: u32 = 65536;
pub const _PC_24: u32 = 131072;
pub const _MCW_IC: u32 = 262144;
pub const _IC_AFFINE: u32 = 262144;
pub const _IC_PROJECTIVE: u32 = 0;
pub const _MCW_DN: u32 = 50331648;
pub const _DN_SAVE: u32 = 0;
pub const _DN_FLUSH: u32 = 16777216;
pub const _DN_FLUSH_OPERANDS_SAVE_RESULTS: u32 = 33554432;
pub const _DN_SAVE_OPERANDS_FLUSH_RESULTS: u32 = 50331648;
pub const _SW_UNEMULATED: u32 = 64;
pub const _SW_SQRTNEG: u32 = 128;
pub const _SW_STACKOVERFLOW: u32 = 512;
pub const _SW_STACKUNDERFLOW: u32 = 1024;
pub const _FPE_INVALID: u32 = 129;
pub const _FPE_DENORMAL: u32 = 130;
pub const _FPE_ZERODIVIDE: u32 = 131;
pub const _FPE_OVERFLOW: u32 = 132;
pub const _FPE_UNDERFLOW: u32 = 133;
pub const _FPE_INEXACT: u32 = 134;
pub const _FPE_UNEMULATED: u32 = 135;
pub const _FPE_SQRTNEG: u32 = 136;
pub const _FPE_STACKOVERFLOW: u32 = 138;
pub const _FPE_STACKUNDERFLOW: u32 = 139;
pub const _FPE_EXPLICITGEN: u32 = 140;
pub const _FPE_MULTIPLE_TRAPS: u32 = 141;
pub const _FPE_MULTIPLE_FAULTS: u32 = 142;
pub const _FPCLASS_SNAN: u32 = 1;
pub const _FPCLASS_QNAN: u32 = 2;
pub const _FPCLASS_NINF: u32 = 4;
pub const _FPCLASS_NN: u32 = 8;
pub const _FPCLASS_ND: u32 = 16;
pub const _FPCLASS_NZ: u32 = 32;
pub const _FPCLASS_PZ: u32 = 64;
pub const _FPCLASS_PD: u32 = 128;
pub const _FPCLASS_PN: u32 = 256;
pub const _FPCLASS_PINF: u32 = 512;
pub const _CW_DEFAULT: u32 = 524319;
pub const DBL_RADIX: u32 = 2;
pub const LDBL_RADIX: u32 = 2;
pub const EM_AMBIGUIOUS: u32 = 2147483648;
pub const EM_AMBIGUOUS: u32 = 2147483648;
pub const MCW_EM: u32 = 524319;
pub const EM_INVALID: u32 = 16;
pub const EM_DENORMAL: u32 = 524288;
pub const EM_ZERODIVIDE: u32 = 8;
pub const EM_OVERFLOW: u32 = 4;
pub const EM_UNDERFLOW: u32 = 2;
pub const EM_INEXACT: u32 = 1;
pub const MCW_IC: u32 = 262144;
pub const IC_AFFINE: u32 = 262144;
pub const IC_PROJECTIVE: u32 = 0;
pub const MCW_RC: u32 = 768;
pub const RC_CHOP: u32 = 768;
pub const RC_UP: u32 = 512;
pub const RC_DOWN: u32 = 256;
pub const RC_NEAR: u32 = 0;
pub const MCW_PC: u32 = 196608;
pub const PC_24: u32 = 131072;
pub const PC_53: u32 = 65536;
pub const PC_64: u32 = 0;
pub const CW_DEFAULT: u32 = 524319;
pub const SW_INVALID: u32 = 16;
pub const SW_DENORMAL: u32 = 524288;
pub const SW_ZERODIVIDE: u32 = 8;
pub const SW_OVERFLOW: u32 = 4;
pub const SW_UNDERFLOW: u32 = 2;
pub const SW_INEXACT: u32 = 1;
pub const SW_UNEMULATED: u32 = 64;
pub const SW_SQRTNEG: u32 = 128;
pub const SW_STACKOVERFLOW: u32 = 512;
pub const SW_STACKUNDERFLOW: u32 = 1024;
pub const FPE_INVALID: u32 = 129;
pub const FPE_DENORMAL: u32 = 130;
pub const FPE_ZERODIVIDE: u32 = 131;
pub const FPE_OVERFLOW: u32 = 132;
pub const FPE_UNDERFLOW: u32 = 133;
pub const FPE_INEXACT: u32 = 134;
pub const FPE_UNEMULATED: u32 = 135;
pub const FPE_SQRTNEG: u32 = 136;
pub const FPE_STACKOVERFLOW: u32 = 138;
pub const FPE_STACKUNDERFLOW: u32 = 139;
pub const FPE_EXPLICITGEN: u32 = 140;
pub const ALC_EXT_EFX_NAME: &[u8; 12] = b"ALC_EXT_EFX\0";
pub const ALC_EFX_MAJOR_VERSION: u32 = 131073;
pub const ALC_EFX_MINOR_VERSION: u32 = 131074;
pub const ALC_MAX_AUXILIARY_SENDS: u32 = 131075;
pub const AL_METERS_PER_UNIT: u32 = 131076;
pub const AL_DIRECT_FILTER: u32 = 131077;
pub const AL_AUXILIARY_SEND_FILTER: u32 = 131078;
pub const AL_AIR_ABSORPTION_FACTOR: u32 = 131079;
pub const AL_ROOM_ROLLOFF_FACTOR: u32 = 131080;
pub const AL_CONE_OUTER_GAINHF: u32 = 131081;
pub const AL_DIRECT_FILTER_GAINHF_AUTO: u32 = 131082;
pub const AL_AUXILIARY_SEND_FILTER_GAIN_AUTO: u32 = 131083;
pub const AL_AUXILIARY_SEND_FILTER_GAINHF_AUTO: u32 = 131084;
pub const AL_REVERB_DENSITY: u32 = 1;
pub const AL_REVERB_DIFFUSION: u32 = 2;
pub const AL_REVERB_GAIN: u32 = 3;
pub const AL_REVERB_GAINHF: u32 = 4;
pub const AL_REVERB_DECAY_TIME: u32 = 5;
pub const AL_REVERB_DECAY_HFRATIO: u32 = 6;
pub const AL_REVERB_REFLECTIONS_GAIN: u32 = 7;
pub const AL_REVERB_REFLECTIONS_DELAY: u32 = 8;
pub const AL_REVERB_LATE_REVERB_GAIN: u32 = 9;
pub const AL_REVERB_LATE_REVERB_DELAY: u32 = 10;
pub const AL_REVERB_AIR_ABSORPTION_GAINHF: u32 = 11;
pub const AL_REVERB_ROOM_ROLLOFF_FACTOR: u32 = 12;
pub const AL_REVERB_DECAY_HFLIMIT: u32 = 13;
pub const AL_EAXREVERB_DENSITY: u32 = 1;
pub const AL_EAXREVERB_DIFFUSION: u32 = 2;
pub const AL_EAXREVERB_GAIN: u32 = 3;
pub const AL_EAXREVERB_GAINHF: u32 = 4;
pub const AL_EAXREVERB_GAINLF: u32 = 5;
pub const AL_EAXREVERB_DECAY_TIME: u32 = 6;
pub const AL_EAXREVERB_DECAY_HFRATIO: u32 = 7;
pub const AL_EAXREVERB_DECAY_LFRATIO: u32 = 8;
pub const AL_EAXREVERB_REFLECTIONS_GAIN: u32 = 9;
pub const AL_EAXREVERB_REFLECTIONS_DELAY: u32 = 10;
pub const AL_EAXREVERB_REFLECTIONS_PAN: u32 = 11;
pub const AL_EAXREVERB_LATE_REVERB_GAIN: u32 = 12;
pub const AL_EAXREVERB_LATE_REVERB_DELAY: u32 = 13;
pub const AL_EAXREVERB_LATE_REVERB_PAN: u32 = 14;
pub const AL_EAXREVERB_ECHO_TIME: u32 = 15;
pub const AL_EAXREVERB_ECHO_DEPTH: u32 = 16;
pub const AL_EAXREVERB_MODULATION_TIME: u32 = 17;
pub const AL_EAXREVERB_MODULATION_DEPTH: u32 = 18;
pub const AL_EAXREVERB_AIR_ABSORPTION_GAINHF: u32 = 19;
pub const AL_EAXREVERB_HFREFERENCE: u32 = 20;
pub const AL_EAXREVERB_LFREFERENCE: u32 = 21;
pub const AL_EAXREVERB_ROOM_ROLLOFF_FACTOR: u32 = 22;
pub const AL_EAXREVERB_DECAY_HFLIMIT: u32 = 23;
pub const AL_CHORUS_WAVEFORM: u32 = 1;
pub const AL_CHORUS_PHASE: u32 = 2;
pub const AL_CHORUS_RATE: u32 = 3;
pub const AL_CHORUS_DEPTH: u32 = 4;
pub const AL_CHORUS_FEEDBACK: u32 = 5;
pub const AL_CHORUS_DELAY: u32 = 6;
pub const AL_DISTORTION_EDGE: u32 = 1;
pub const AL_DISTORTION_GAIN: u32 = 2;
pub const AL_DISTORTION_LOWPASS_CUTOFF: u32 = 3;
pub const AL_DISTORTION_EQCENTER: u32 = 4;
pub const AL_DISTORTION_EQBANDWIDTH: u32 = 5;
pub const AL_ECHO_DELAY: u32 = 1;
pub const AL_ECHO_LRDELAY: u32 = 2;
pub const AL_ECHO_DAMPING: u32 = 3;
pub const AL_ECHO_FEEDBACK: u32 = 4;
pub const AL_ECHO_SPREAD: u32 = 5;
pub const AL_FLANGER_WAVEFORM: u32 = 1;
pub const AL_FLANGER_PHASE: u32 = 2;
pub const AL_FLANGER_RATE: u32 = 3;
pub const AL_FLANGER_DEPTH: u32 = 4;
pub const AL_FLANGER_FEEDBACK: u32 = 5;
pub const AL_FLANGER_DELAY: u32 = 6;
pub const AL_FREQUENCY_SHIFTER_FREQUENCY: u32 = 1;
pub const AL_FREQUENCY_SHIFTER_LEFT_DIRECTION: u32 = 2;
pub const AL_FREQUENCY_SHIFTER_RIGHT_DIRECTION: u32 = 3;
pub const AL_VOCAL_MORPHER_PHONEMEA: u32 = 1;
pub const AL_VOCAL_MORPHER_PHONEMEA_COARSE_TUNING: u32 = 2;
pub const AL_VOCAL_MORPHER_PHONEMEB: u32 = 3;
pub const AL_VOCAL_MORPHER_PHONEMEB_COARSE_TUNING: u32 = 4;
pub const AL_VOCAL_MORPHER_WAVEFORM: u32 = 5;
pub const AL_VOCAL_MORPHER_RATE: u32 = 6;
pub const AL_PITCH_SHIFTER_COARSE_TUNE: u32 = 1;
pub const AL_PITCH_SHIFTER_FINE_TUNE: u32 = 2;
pub const AL_RING_MODULATOR_FREQUENCY: u32 = 1;
pub const AL_RING_MODULATOR_HIGHPASS_CUTOFF: u32 = 2;
pub const AL_RING_MODULATOR_WAVEFORM: u32 = 3;
pub const AL_AUTOWAH_ATTACK_TIME: u32 = 1;
pub const AL_AUTOWAH_RELEASE_TIME: u32 = 2;
pub const AL_AUTOWAH_RESONANCE: u32 = 3;
pub const AL_AUTOWAH_PEAK_GAIN: u32 = 4;
pub const AL_COMPRESSOR_ONOFF: u32 = 1;
pub const AL_EQUALIZER_LOW_GAIN: u32 = 1;
pub const AL_EQUALIZER_LOW_CUTOFF: u32 = 2;
pub const AL_EQUALIZER_MID1_GAIN: u32 = 3;
pub const AL_EQUALIZER_MID1_CENTER: u32 = 4;
pub const AL_EQUALIZER_MID1_WIDTH: u32 = 5;
pub const AL_EQUALIZER_MID2_GAIN: u32 = 6;
pub const AL_EQUALIZER_MID2_CENTER: u32 = 7;
pub const AL_EQUALIZER_MID2_WIDTH: u32 = 8;
pub const AL_EQUALIZER_HIGH_GAIN: u32 = 9;
pub const AL_EQUALIZER_HIGH_CUTOFF: u32 = 10;
pub const AL_EFFECT_FIRST_PARAMETER: u32 = 0;
pub const AL_EFFECT_LAST_PARAMETER: u32 = 32768;
pub const AL_EFFECT_TYPE: u32 = 32769;
pub const AL_EFFECT_NULL: u32 = 0;
pub const AL_EFFECT_REVERB: u32 = 1;
pub const AL_EFFECT_CHORUS: u32 = 2;
pub const AL_EFFECT_DISTORTION: u32 = 3;
pub const AL_EFFECT_ECHO: u32 = 4;
pub const AL_EFFECT_FLANGER: u32 = 5;
pub const AL_EFFECT_FREQUENCY_SHIFTER: u32 = 6;
pub const AL_EFFECT_VOCAL_MORPHER: u32 = 7;
pub const AL_EFFECT_PITCH_SHIFTER: u32 = 8;
pub const AL_EFFECT_RING_MODULATOR: u32 = 9;
pub const AL_EFFECT_AUTOWAH: u32 = 10;
pub const AL_EFFECT_COMPRESSOR: u32 = 11;
pub const AL_EFFECT_EQUALIZER: u32 = 12;
pub const AL_EFFECT_EAXREVERB: u32 = 32768;
pub const AL_EFFECTSLOT_EFFECT: u32 = 1;
pub const AL_EFFECTSLOT_GAIN: u32 = 2;
pub const AL_EFFECTSLOT_AUXILIARY_SEND_AUTO: u32 = 3;
pub const AL_EFFECTSLOT_NULL: u32 = 0;
pub const AL_LOWPASS_GAIN: u32 = 1;
pub const AL_LOWPASS_GAINHF: u32 = 2;
pub const AL_HIGHPASS_GAIN: u32 = 1;
pub const AL_HIGHPASS_GAINLF: u32 = 2;
pub const AL_BANDPASS_GAIN: u32 = 1;
pub const AL_BANDPASS_GAINLF: u32 = 2;
pub const AL_BANDPASS_GAINHF: u32 = 3;
pub const AL_FILTER_FIRST_PARAMETER: u32 = 0;
pub const AL_FILTER_LAST_PARAMETER: u32 = 32768;
pub const AL_FILTER_TYPE: u32 = 32769;
pub const AL_FILTER_NULL: u32 = 0;
pub const AL_FILTER_LOWPASS: u32 = 1;
pub const AL_FILTER_HIGHPASS: u32 = 2;
pub const AL_FILTER_BANDPASS: u32 = 3;
pub const AL_LOWPASS_MIN_GAIN: f64 = 0.0;
pub const AL_LOWPASS_MAX_GAIN: f64 = 1.0;
pub const AL_LOWPASS_DEFAULT_GAIN: f64 = 1.0;
pub const AL_LOWPASS_MIN_GAINHF: f64 = 0.0;
pub const AL_LOWPASS_MAX_GAINHF: f64 = 1.0;
pub const AL_LOWPASS_DEFAULT_GAINHF: f64 = 1.0;
pub const AL_HIGHPASS_MIN_GAIN: f64 = 0.0;
pub const AL_HIGHPASS_MAX_GAIN: f64 = 1.0;
pub const AL_HIGHPASS_DEFAULT_GAIN: f64 = 1.0;
pub const AL_HIGHPASS_MIN_GAINLF: f64 = 0.0;
pub const AL_HIGHPASS_MAX_GAINLF: f64 = 1.0;
pub const AL_HIGHPASS_DEFAULT_GAINLF: f64 = 1.0;
pub const AL_BANDPASS_MIN_GAIN: f64 = 0.0;
pub const AL_BANDPASS_MAX_GAIN: f64 = 1.0;
pub const AL_BANDPASS_DEFAULT_GAIN: f64 = 1.0;
pub const AL_BANDPASS_MIN_GAINHF: f64 = 0.0;
pub const AL_BANDPASS_MAX_GAINHF: f64 = 1.0;
pub const AL_BANDPASS_DEFAULT_GAINHF: f64 = 1.0;
pub const AL_BANDPASS_MIN_GAINLF: f64 = 0.0;
pub const AL_BANDPASS_MAX_GAINLF: f64 = 1.0;
pub const AL_BANDPASS_DEFAULT_GAINLF: f64 = 1.0;
pub const AL_REVERB_MIN_DENSITY: f64 = 0.0;
pub const AL_REVERB_MAX_DENSITY: f64 = 1.0;
pub const AL_REVERB_DEFAULT_DENSITY: f64 = 1.0;
pub const AL_REVERB_MIN_DIFFUSION: f64 = 0.0;
pub const AL_REVERB_MAX_DIFFUSION: f64 = 1.0;
pub const AL_REVERB_DEFAULT_DIFFUSION: f64 = 1.0;
pub const AL_REVERB_MIN_GAIN: f64 = 0.0;
pub const AL_REVERB_MAX_GAIN: f64 = 1.0;
pub const AL_REVERB_DEFAULT_GAIN: f64 = 0.32;
pub const AL_REVERB_MIN_GAINHF: f64 = 0.0;
pub const AL_REVERB_MAX_GAINHF: f64 = 1.0;
pub const AL_REVERB_DEFAULT_GAINHF: f64 = 0.89;
pub const AL_REVERB_MIN_DECAY_TIME: f64 = 0.1;
pub const AL_REVERB_MAX_DECAY_TIME: f64 = 20.0;
pub const AL_REVERB_DEFAULT_DECAY_TIME: f64 = 1.49;
pub const AL_REVERB_MIN_DECAY_HFRATIO: f64 = 0.1;
pub const AL_REVERB_MAX_DECAY_HFRATIO: f64 = 2.0;
pub const AL_REVERB_DEFAULT_DECAY_HFRATIO: f64 = 0.83;
pub const AL_REVERB_MIN_REFLECTIONS_GAIN: f64 = 0.0;
pub const AL_REVERB_MAX_REFLECTIONS_GAIN: f64 = 3.16;
pub const AL_REVERB_DEFAULT_REFLECTIONS_GAIN: f64 = 0.05;
pub const AL_REVERB_MIN_REFLECTIONS_DELAY: f64 = 0.0;
pub const AL_REVERB_MAX_REFLECTIONS_DELAY: f64 = 0.3;
pub const AL_REVERB_DEFAULT_REFLECTIONS_DELAY: f64 = 0.007;
pub const AL_REVERB_MIN_LATE_REVERB_GAIN: f64 = 0.0;
pub const AL_REVERB_MAX_LATE_REVERB_GAIN: f64 = 10.0;
pub const AL_REVERB_DEFAULT_LATE_REVERB_GAIN: f64 = 1.26;
pub const AL_REVERB_MIN_LATE_REVERB_DELAY: f64 = 0.0;
pub const AL_REVERB_MAX_LATE_REVERB_DELAY: f64 = 0.1;
pub const AL_REVERB_DEFAULT_LATE_REVERB_DELAY: f64 = 0.011;
pub const AL_REVERB_MIN_AIR_ABSORPTION_GAINHF: f64 = 0.892;
pub const AL_REVERB_MAX_AIR_ABSORPTION_GAINHF: f64 = 1.0;
pub const AL_REVERB_DEFAULT_AIR_ABSORPTION_GAINHF: f64 = 0.994;
pub const AL_REVERB_MIN_ROOM_ROLLOFF_FACTOR: f64 = 0.0;
pub const AL_REVERB_MAX_ROOM_ROLLOFF_FACTOR: f64 = 10.0;
pub const AL_REVERB_DEFAULT_ROOM_ROLLOFF_FACTOR: f64 = 0.0;
pub const AL_REVERB_MIN_DECAY_HFLIMIT: u32 = 0;
pub const AL_REVERB_MAX_DECAY_HFLIMIT: u32 = 1;
pub const AL_REVERB_DEFAULT_DECAY_HFLIMIT: u32 = 1;
pub const AL_EAXREVERB_MIN_DENSITY: f64 = 0.0;
pub const AL_EAXREVERB_MAX_DENSITY: f64 = 1.0;
pub const AL_EAXREVERB_DEFAULT_DENSITY: f64 = 1.0;
pub const AL_EAXREVERB_MIN_DIFFUSION: f64 = 0.0;
pub const AL_EAXREVERB_MAX_DIFFUSION: f64 = 1.0;
pub const AL_EAXREVERB_DEFAULT_DIFFUSION: f64 = 1.0;
pub const AL_EAXREVERB_MIN_GAIN: f64 = 0.0;
pub const AL_EAXREVERB_MAX_GAIN: f64 = 1.0;
pub const AL_EAXREVERB_DEFAULT_GAIN: f64 = 0.32;
pub const AL_EAXREVERB_MIN_GAINHF: f64 = 0.0;
pub const AL_EAXREVERB_MAX_GAINHF: f64 = 1.0;
pub const AL_EAXREVERB_DEFAULT_GAINHF: f64 = 0.89;
pub const AL_EAXREVERB_MIN_GAINLF: f64 = 0.0;
pub const AL_EAXREVERB_MAX_GAINLF: f64 = 1.0;
pub const AL_EAXREVERB_DEFAULT_GAINLF: f64 = 1.0;
pub const AL_EAXREVERB_MIN_DECAY_TIME: f64 = 0.1;
pub const AL_EAXREVERB_MAX_DECAY_TIME: f64 = 20.0;
pub const AL_EAXREVERB_DEFAULT_DECAY_TIME: f64 = 1.49;
pub const AL_EAXREVERB_MIN_DECAY_HFRATIO: f64 = 0.1;
pub const AL_EAXREVERB_MAX_DECAY_HFRATIO: f64 = 2.0;
pub const AL_EAXREVERB_DEFAULT_DECAY_HFRATIO: f64 = 0.83;
pub const AL_EAXREVERB_MIN_DECAY_LFRATIO: f64 = 0.1;
pub const AL_EAXREVERB_MAX_DECAY_LFRATIO: f64 = 2.0;
pub const AL_EAXREVERB_DEFAULT_DECAY_LFRATIO: f64 = 1.0;
pub const AL_EAXREVERB_MIN_REFLECTIONS_GAIN: f64 = 0.0;
pub const AL_EAXREVERB_MAX_REFLECTIONS_GAIN: f64 = 3.16;
pub const AL_EAXREVERB_DEFAULT_REFLECTIONS_GAIN: f64 = 0.05;
pub const AL_EAXREVERB_MIN_REFLECTIONS_DELAY: f64 = 0.0;
pub const AL_EAXREVERB_MAX_REFLECTIONS_DELAY: f64 = 0.3;
pub const AL_EAXREVERB_DEFAULT_REFLECTIONS_DELAY: f64 = 0.007;
pub const AL_EAXREVERB_DEFAULT_REFLECTIONS_PAN_XYZ: f64 = 0.0;
pub const AL_EAXREVERB_MIN_LATE_REVERB_GAIN: f64 = 0.0;
pub const AL_EAXREVERB_MAX_LATE_REVERB_GAIN: f64 = 10.0;
pub const AL_EAXREVERB_DEFAULT_LATE_REVERB_GAIN: f64 = 1.26;
pub const AL_EAXREVERB_MIN_LATE_REVERB_DELAY: f64 = 0.0;
pub const AL_EAXREVERB_MAX_LATE_REVERB_DELAY: f64 = 0.1;
pub const AL_EAXREVERB_DEFAULT_LATE_REVERB_DELAY: f64 = 0.011;
pub const AL_EAXREVERB_DEFAULT_LATE_REVERB_PAN_XYZ: f64 = 0.0;
pub const AL_EAXREVERB_MIN_ECHO_TIME: f64 = 0.075;
pub const AL_EAXREVERB_MAX_ECHO_TIME: f64 = 0.25;
pub const AL_EAXREVERB_DEFAULT_ECHO_TIME: f64 = 0.25;
pub const AL_EAXREVERB_MIN_ECHO_DEPTH: f64 = 0.0;
pub const AL_EAXREVERB_MAX_ECHO_DEPTH: f64 = 1.0;
pub const AL_EAXREVERB_DEFAULT_ECHO_DEPTH: f64 = 0.0;
pub const AL_EAXREVERB_MIN_MODULATION_TIME: f64 = 0.04;
pub const AL_EAXREVERB_MAX_MODULATION_TIME: f64 = 4.0;
pub const AL_EAXREVERB_DEFAULT_MODULATION_TIME: f64 = 0.25;
pub const AL_EAXREVERB_MIN_MODULATION_DEPTH: f64 = 0.0;
pub const AL_EAXREVERB_MAX_MODULATION_DEPTH: f64 = 1.0;
pub const AL_EAXREVERB_DEFAULT_MODULATION_DEPTH: f64 = 0.0;
pub const AL_EAXREVERB_MIN_AIR_ABSORPTION_GAINHF: f64 = 0.892;
pub const AL_EAXREVERB_MAX_AIR_ABSORPTION_GAINHF: f64 = 1.0;
pub const AL_EAXREVERB_DEFAULT_AIR_ABSORPTION_GAINHF: f64 = 0.994;
pub const AL_EAXREVERB_MIN_HFREFERENCE: f64 = 1000.0;
pub const AL_EAXREVERB_MAX_HFREFERENCE: f64 = 20000.0;
pub const AL_EAXREVERB_DEFAULT_HFREFERENCE: f64 = 5000.0;
pub const AL_EAXREVERB_MIN_LFREFERENCE: f64 = 20.0;
pub const AL_EAXREVERB_MAX_LFREFERENCE: f64 = 1000.0;
pub const AL_EAXREVERB_DEFAULT_LFREFERENCE: f64 = 250.0;
pub const AL_EAXREVERB_MIN_ROOM_ROLLOFF_FACTOR: f64 = 0.0;
pub const AL_EAXREVERB_MAX_ROOM_ROLLOFF_FACTOR: f64 = 10.0;
pub const AL_EAXREVERB_DEFAULT_ROOM_ROLLOFF_FACTOR: f64 = 0.0;
pub const AL_EAXREVERB_MIN_DECAY_HFLIMIT: u32 = 0;
pub const AL_EAXREVERB_MAX_DECAY_HFLIMIT: u32 = 1;
pub const AL_EAXREVERB_DEFAULT_DECAY_HFLIMIT: u32 = 1;
pub const AL_CHORUS_WAVEFORM_SINUSOID: u32 = 0;
pub const AL_CHORUS_WAVEFORM_TRIANGLE: u32 = 1;
pub const AL_CHORUS_MIN_WAVEFORM: u32 = 0;
pub const AL_CHORUS_MAX_WAVEFORM: u32 = 1;
pub const AL_CHORUS_DEFAULT_WAVEFORM: u32 = 1;
pub const AL_CHORUS_MIN_PHASE: i32 = -180;
pub const AL_CHORUS_MAX_PHASE: u32 = 180;
pub const AL_CHORUS_DEFAULT_PHASE: u32 = 90;
pub const AL_CHORUS_MIN_RATE: f64 = 0.0;
pub const AL_CHORUS_MAX_RATE: f64 = 10.0;
pub const AL_CHORUS_DEFAULT_RATE: f64 = 1.1;
pub const AL_CHORUS_MIN_DEPTH: f64 = 0.0;
pub const AL_CHORUS_MAX_DEPTH: f64 = 1.0;
pub const AL_CHORUS_DEFAULT_DEPTH: f64 = 0.1;
pub const AL_CHORUS_MIN_FEEDBACK: f64 = -1.0;
pub const AL_CHORUS_MAX_FEEDBACK: f64 = 1.0;
pub const AL_CHORUS_DEFAULT_FEEDBACK: f64 = 0.25;
pub const AL_CHORUS_MIN_DELAY: f64 = 0.0;
pub const AL_CHORUS_MAX_DELAY: f64 = 0.016;
pub const AL_CHORUS_DEFAULT_DELAY: f64 = 0.016;
pub const AL_DISTORTION_MIN_EDGE: f64 = 0.0;
pub const AL_DISTORTION_MAX_EDGE: f64 = 1.0;
pub const AL_DISTORTION_DEFAULT_EDGE: f64 = 0.2;
pub const AL_DISTORTION_MIN_GAIN: f64 = 0.01;
pub const AL_DISTORTION_MAX_GAIN: f64 = 1.0;
pub const AL_DISTORTION_DEFAULT_GAIN: f64 = 0.05;
pub const AL_DISTORTION_MIN_LOWPASS_CUTOFF: f64 = 80.0;
pub const AL_DISTORTION_MAX_LOWPASS_CUTOFF: f64 = 24000.0;
pub const AL_DISTORTION_DEFAULT_LOWPASS_CUTOFF: f64 = 8000.0;
pub const AL_DISTORTION_MIN_EQCENTER: f64 = 80.0;
pub const AL_DISTORTION_MAX_EQCENTER: f64 = 24000.0;
pub const AL_DISTORTION_DEFAULT_EQCENTER: f64 = 3600.0;
pub const AL_DISTORTION_MIN_EQBANDWIDTH: f64 = 80.0;
pub const AL_DISTORTION_MAX_EQBANDWIDTH: f64 = 24000.0;
pub const AL_DISTORTION_DEFAULT_EQBANDWIDTH: f64 = 3600.0;
pub const AL_ECHO_MIN_DELAY: f64 = 0.0;
pub const AL_ECHO_MAX_DELAY: f64 = 0.207;
pub const AL_ECHO_DEFAULT_DELAY: f64 = 0.1;
pub const AL_ECHO_MIN_LRDELAY: f64 = 0.0;
pub const AL_ECHO_MAX_LRDELAY: f64 = 0.404;
pub const AL_ECHO_DEFAULT_LRDELAY: f64 = 0.1;
pub const AL_ECHO_MIN_DAMPING: f64 = 0.0;
pub const AL_ECHO_MAX_DAMPING: f64 = 0.99;
pub const AL_ECHO_DEFAULT_DAMPING: f64 = 0.5;
pub const AL_ECHO_MIN_FEEDBACK: f64 = 0.0;
pub const AL_ECHO_MAX_FEEDBACK: f64 = 1.0;
pub const AL_ECHO_DEFAULT_FEEDBACK: f64 = 0.5;
pub const AL_ECHO_MIN_SPREAD: f64 = -1.0;
pub const AL_ECHO_MAX_SPREAD: f64 = 1.0;
pub const AL_ECHO_DEFAULT_SPREAD: f64 = -1.0;
pub const AL_FLANGER_WAVEFORM_SINUSOID: u32 = 0;
pub const AL_FLANGER_WAVEFORM_TRIANGLE: u32 = 1;
pub const AL_FLANGER_MIN_WAVEFORM: u32 = 0;
pub const AL_FLANGER_MAX_WAVEFORM: u32 = 1;
pub const AL_FLANGER_DEFAULT_WAVEFORM: u32 = 1;
pub const AL_FLANGER_MIN_PHASE: i32 = -180;
pub const AL_FLANGER_MAX_PHASE: u32 = 180;
pub const AL_FLANGER_DEFAULT_PHASE: u32 = 0;
pub const AL_FLANGER_MIN_RATE: f64 = 0.0;
pub const AL_FLANGER_MAX_RATE: f64 = 10.0;
pub const AL_FLANGER_DEFAULT_RATE: f64 = 0.27;
pub const AL_FLANGER_MIN_DEPTH: f64 = 0.0;
pub const AL_FLANGER_MAX_DEPTH: f64 = 1.0;
pub const AL_FLANGER_DEFAULT_DEPTH: f64 = 1.0;
pub const AL_FLANGER_MIN_FEEDBACK: f64 = -1.0;
pub const AL_FLANGER_MAX_FEEDBACK: f64 = 1.0;
pub const AL_FLANGER_DEFAULT_FEEDBACK: f64 = -0.5;
pub const AL_FLANGER_MIN_DELAY: f64 = 0.0;
pub const AL_FLANGER_MAX_DELAY: f64 = 0.004;
pub const AL_FLANGER_DEFAULT_DELAY: f64 = 0.002;
pub const AL_FREQUENCY_SHIFTER_MIN_FREQUENCY: f64 = 0.0;
pub const AL_FREQUENCY_SHIFTER_MAX_FREQUENCY: f64 = 24000.0;
pub const AL_FREQUENCY_SHIFTER_DEFAULT_FREQUENCY: f64 = 0.0;
pub const AL_FREQUENCY_SHIFTER_MIN_LEFT_DIRECTION: u32 = 0;
pub const AL_FREQUENCY_SHIFTER_MAX_LEFT_DIRECTION: u32 = 2;
pub const AL_FREQUENCY_SHIFTER_DEFAULT_LEFT_DIRECTION: u32 = 0;
pub const AL_FREQUENCY_SHIFTER_DIRECTION_DOWN: u32 = 0;
pub const AL_FREQUENCY_SHIFTER_DIRECTION_UP: u32 = 1;
pub const AL_FREQUENCY_SHIFTER_DIRECTION_OFF: u32 = 2;
pub const AL_FREQUENCY_SHIFTER_MIN_RIGHT_DIRECTION: u32 = 0;
pub const AL_FREQUENCY_SHIFTER_MAX_RIGHT_DIRECTION: u32 = 2;
pub const AL_FREQUENCY_SHIFTER_DEFAULT_RIGHT_DIRECTION: u32 = 0;
pub const AL_VOCAL_MORPHER_MIN_PHONEMEA: u32 = 0;
pub const AL_VOCAL_MORPHER_MAX_PHONEMEA: u32 = 29;
pub const AL_VOCAL_MORPHER_DEFAULT_PHONEMEA: u32 = 0;
pub const AL_VOCAL_MORPHER_MIN_PHONEMEA_COARSE_TUNING: i32 = -24;
pub const AL_VOCAL_MORPHER_MAX_PHONEMEA_COARSE_TUNING: u32 = 24;
pub const AL_VOCAL_MORPHER_DEFAULT_PHONEMEA_COARSE_TUNING: u32 = 0;
pub const AL_VOCAL_MORPHER_MIN_PHONEMEB: u32 = 0;
pub const AL_VOCAL_MORPHER_MAX_PHONEMEB: u32 = 29;
pub const AL_VOCAL_MORPHER_DEFAULT_PHONEMEB: u32 = 10;
pub const AL_VOCAL_MORPHER_MIN_PHONEMEB_COARSE_TUNING: i32 = -24;
pub const AL_VOCAL_MORPHER_MAX_PHONEMEB_COARSE_TUNING: u32 = 24;
pub const AL_VOCAL_MORPHER_DEFAULT_PHONEMEB_COARSE_TUNING: u32 = 0;
pub const AL_VOCAL_MORPHER_PHONEME_A: u32 = 0;
pub const AL_VOCAL_MORPHER_PHONEME_E: u32 = 1;
pub const AL_VOCAL_MORPHER_PHONEME_I: u32 = 2;
pub const AL_VOCAL_MORPHER_PHONEME_O: u32 = 3;
pub const AL_VOCAL_MORPHER_PHONEME_U: u32 = 4;
pub const AL_VOCAL_MORPHER_PHONEME_AA: u32 = 5;
pub const AL_VOCAL_MORPHER_PHONEME_AE: u32 = 6;
pub const AL_VOCAL_MORPHER_PHONEME_AH: u32 = 7;
pub const AL_VOCAL_MORPHER_PHONEME_AO: u32 = 8;
pub const AL_VOCAL_MORPHER_PHONEME_EH: u32 = 9;
pub const AL_VOCAL_MORPHER_PHONEME_ER: u32 = 10;
pub const AL_VOCAL_MORPHER_PHONEME_IH: u32 = 11;
pub const AL_VOCAL_MORPHER_PHONEME_IY: u32 = 12;
pub const AL_VOCAL_MORPHER_PHONEME_UH: u32 = 13;
pub const AL_VOCAL_MORPHER_PHONEME_UW: u32 = 14;
pub const AL_VOCAL_MORPHER_PHONEME_B: u32 = 15;
pub const AL_VOCAL_MORPHER_PHONEME_D: u32 = 16;
pub const AL_VOCAL_MORPHER_PHONEME_F: u32 = 17;
pub const AL_VOCAL_MORPHER_PHONEME_G: u32 = 18;
pub const AL_VOCAL_MORPHER_PHONEME_J: u32 = 19;
pub const AL_VOCAL_MORPHER_PHONEME_K: u32 = 20;
pub const AL_VOCAL_MORPHER_PHONEME_L: u32 = 21;
pub const AL_VOCAL_MORPHER_PHONEME_M: u32 = 22;
pub const AL_VOCAL_MORPHER_PHONEME_N: u32 = 23;
pub const AL_VOCAL_MORPHER_PHONEME_P: u32 = 24;
pub const AL_VOCAL_MORPHER_PHONEME_R: u32 = 25;
pub const AL_VOCAL_MORPHER_PHONEME_S: u32 = 26;
pub const AL_VOCAL_MORPHER_PHONEME_T: u32 = 27;
pub const AL_VOCAL_MORPHER_PHONEME_V: u32 = 28;
pub const AL_VOCAL_MORPHER_PHONEME_Z: u32 = 29;
pub const AL_VOCAL_MORPHER_WAVEFORM_SINUSOID: u32 = 0;
pub const AL_VOCAL_MORPHER_WAVEFORM_TRIANGLE: u32 = 1;
pub const AL_VOCAL_MORPHER_WAVEFORM_SAWTOOTH: u32 = 2;
pub const AL_VOCAL_MORPHER_MIN_WAVEFORM: u32 = 0;
pub const AL_VOCAL_MORPHER_MAX_WAVEFORM: u32 = 2;
pub const AL_VOCAL_MORPHER_DEFAULT_WAVEFORM: u32 = 0;
pub const AL_VOCAL_MORPHER_MIN_RATE: f64 = 0.0;
pub const AL_VOCAL_MORPHER_MAX_RATE: f64 = 10.0;
pub const AL_VOCAL_MORPHER_DEFAULT_RATE: f64 = 1.41;
pub const AL_PITCH_SHIFTER_MIN_COARSE_TUNE: i32 = -12;
pub const AL_PITCH_SHIFTER_MAX_COARSE_TUNE: u32 = 12;
pub const AL_PITCH_SHIFTER_DEFAULT_COARSE_TUNE: u32 = 12;
pub const AL_PITCH_SHIFTER_MIN_FINE_TUNE: i32 = -50;
pub const AL_PITCH_SHIFTER_MAX_FINE_TUNE: u32 = 50;
pub const AL_PITCH_SHIFTER_DEFAULT_FINE_TUNE: u32 = 0;
pub const AL_RING_MODULATOR_MIN_FREQUENCY: f64 = 0.0;
pub const AL_RING_MODULATOR_MAX_FREQUENCY: f64 = 8000.0;
pub const AL_RING_MODULATOR_DEFAULT_FREQUENCY: f64 = 440.0;
pub const AL_RING_MODULATOR_MIN_HIGHPASS_CUTOFF: f64 = 0.0;
pub const AL_RING_MODULATOR_MAX_HIGHPASS_CUTOFF: f64 = 24000.0;
pub const AL_RING_MODULATOR_DEFAULT_HIGHPASS_CUTOFF: f64 = 800.0;
pub const AL_RING_MODULATOR_SINUSOID: u32 = 0;
pub const AL_RING_MODULATOR_SAWTOOTH: u32 = 1;
pub const AL_RING_MODULATOR_SQUARE: u32 = 2;
pub const AL_RING_MODULATOR_MIN_WAVEFORM: u32 = 0;
pub const AL_RING_MODULATOR_MAX_WAVEFORM: u32 = 2;
pub const AL_RING_MODULATOR_DEFAULT_WAVEFORM: u32 = 0;
pub const AL_AUTOWAH_MIN_ATTACK_TIME: f64 = 0.0001;
pub const AL_AUTOWAH_MAX_ATTACK_TIME: f64 = 1.0;
pub const AL_AUTOWAH_DEFAULT_ATTACK_TIME: f64 = 0.06;
pub const AL_AUTOWAH_MIN_RELEASE_TIME: f64 = 0.0001;
pub const AL_AUTOWAH_MAX_RELEASE_TIME: f64 = 1.0;
pub const AL_AUTOWAH_DEFAULT_RELEASE_TIME: f64 = 0.06;
pub const AL_AUTOWAH_MIN_RESONANCE: f64 = 2.0;
pub const AL_AUTOWAH_MAX_RESONANCE: f64 = 1000.0;
pub const AL_AUTOWAH_DEFAULT_RESONANCE: f64 = 1000.0;
pub const AL_AUTOWAH_MIN_PEAK_GAIN: f64 = 0.00003;
pub const AL_AUTOWAH_MAX_PEAK_GAIN: f64 = 31621.0;
pub const AL_AUTOWAH_DEFAULT_PEAK_GAIN: f64 = 11.22;
pub const AL_COMPRESSOR_MIN_ONOFF: u32 = 0;
pub const AL_COMPRESSOR_MAX_ONOFF: u32 = 1;
pub const AL_COMPRESSOR_DEFAULT_ONOFF: u32 = 1;
pub const AL_EQUALIZER_MIN_LOW_GAIN: f64 = 0.126;
pub const AL_EQUALIZER_MAX_LOW_GAIN: f64 = 7.943;
pub const AL_EQUALIZER_DEFAULT_LOW_GAIN: f64 = 1.0;
pub const AL_EQUALIZER_MIN_LOW_CUTOFF: f64 = 50.0;
pub const AL_EQUALIZER_MAX_LOW_CUTOFF: f64 = 800.0;
pub const AL_EQUALIZER_DEFAULT_LOW_CUTOFF: f64 = 200.0;
pub const AL_EQUALIZER_MIN_MID1_GAIN: f64 = 0.126;
pub const AL_EQUALIZER_MAX_MID1_GAIN: f64 = 7.943;
pub const AL_EQUALIZER_DEFAULT_MID1_GAIN: f64 = 1.0;
pub const AL_EQUALIZER_MIN_MID1_CENTER: f64 = 200.0;
pub const AL_EQUALIZER_MAX_MID1_CENTER: f64 = 3000.0;
pub const AL_EQUALIZER_DEFAULT_MID1_CENTER: f64 = 500.0;
pub const AL_EQUALIZER_MIN_MID1_WIDTH: f64 = 0.01;
pub const AL_EQUALIZER_MAX_MID1_WIDTH: f64 = 1.0;
pub const AL_EQUALIZER_DEFAULT_MID1_WIDTH: f64 = 1.0;
pub const AL_EQUALIZER_MIN_MID2_GAIN: f64 = 0.126;
pub const AL_EQUALIZER_MAX_MID2_GAIN: f64 = 7.943;
pub const AL_EQUALIZER_DEFAULT_MID2_GAIN: f64 = 1.0;
pub const AL_EQUALIZER_MIN_MID2_CENTER: f64 = 1000.0;
pub const AL_EQUALIZER_MAX_MID2_CENTER: f64 = 8000.0;
pub const AL_EQUALIZER_DEFAULT_MID2_CENTER: f64 = 3000.0;
pub const AL_EQUALIZER_MIN_MID2_WIDTH: f64 = 0.01;
pub const AL_EQUALIZER_MAX_MID2_WIDTH: f64 = 1.0;
pub const AL_EQUALIZER_DEFAULT_MID2_WIDTH: f64 = 1.0;
pub const AL_EQUALIZER_MIN_HIGH_GAIN: f64 = 0.126;
pub const AL_EQUALIZER_MAX_HIGH_GAIN: f64 = 7.943;
pub const AL_EQUALIZER_DEFAULT_HIGH_GAIN: f64 = 1.0;
pub const AL_EQUALIZER_MIN_HIGH_CUTOFF: f64 = 4000.0;
pub const AL_EQUALIZER_MAX_HIGH_CUTOFF: f64 = 16000.0;
pub const AL_EQUALIZER_DEFAULT_HIGH_CUTOFF: f64 = 6000.0;
pub const AL_MIN_AIR_ABSORPTION_FACTOR: f64 = 0.0;
pub const AL_MAX_AIR_ABSORPTION_FACTOR: f64 = 10.0;
pub const AL_DEFAULT_AIR_ABSORPTION_FACTOR: f64 = 0.0;
pub const AL_MIN_ROOM_ROLLOFF_FACTOR: f64 = 0.0;
pub const AL_MAX_ROOM_ROLLOFF_FACTOR: f64 = 10.0;
pub const AL_DEFAULT_ROOM_ROLLOFF_FACTOR: f64 = 0.0;
pub const AL_MIN_CONE_OUTER_GAINHF: f64 = 0.0;
pub const AL_MAX_CONE_OUTER_GAINHF: f64 = 1.0;
pub const AL_DEFAULT_CONE_OUTER_GAINHF: f64 = 1.0;
pub const AL_MIN_DIRECT_FILTER_GAINHF_AUTO: u32 = 0;
pub const AL_MAX_DIRECT_FILTER_GAINHF_AUTO: u32 = 1;
pub const AL_DEFAULT_DIRECT_FILTER_GAINHF_AUTO: u32 = 1;
pub const AL_MIN_AUXILIARY_SEND_FILTER_GAIN_AUTO: u32 = 0;
pub const AL_MAX_AUXILIARY_SEND_FILTER_GAIN_AUTO: u32 = 1;
pub const AL_DEFAULT_AUXILIARY_SEND_FILTER_GAIN_AUTO: u32 = 1;
pub const AL_MIN_AUXILIARY_SEND_FILTER_GAINHF_AUTO: u32 = 0;
pub const AL_MAX_AUXILIARY_SEND_FILTER_GAINHF_AUTO: u32 = 1;
pub const AL_DEFAULT_AUXILIARY_SEND_FILTER_GAINHF_AUTO: u32 = 1;
pub const AL_DEFAULT_METERS_PER_UNIT: f64 = 1.0;
pub const ALC_EXT_disconnect: u32 = 1;
pub const ALC_CONNECTED: u32 = 787;
pub const ALC_EXT_thread_local_context: u32 = 1;
pub const AL_EXT_source_distance_model: u32 = 1;
pub const AL_SOURCE_DISTANCE_MODEL: u32 = 512;
pub const AL_SOFT_buffer_sub_data: u32 = 1;
pub const AL_BYTE_RW_OFFSETS_SOFT: u32 = 4145;
pub const AL_SAMPLE_RW_OFFSETS_SOFT: u32 = 4146;
pub const AL_SOFT_loop_points: u32 = 1;
pub const AL_LOOP_POINTS_SOFT: u32 = 8213;
pub const AL_EXT_FOLDBACK: u32 = 1;
pub const AL_EXT_FOLDBACK_NAME: &[u8; 16] = b"AL_EXT_FOLDBACK\0";
pub const AL_FOLDBACK_EVENT_BLOCK: u32 = 16658;
pub const AL_FOLDBACK_EVENT_START: u32 = 16657;
pub const AL_FOLDBACK_EVENT_STOP: u32 = 16659;
pub const AL_FOLDBACK_MODE_MONO: u32 = 16641;
pub const AL_FOLDBACK_MODE_STEREO: u32 = 16642;
pub const ALC_EXT_DEDICATED: u32 = 1;
pub const AL_DEDICATED_GAIN: u32 = 1;
pub const AL_EFFECT_DEDICATED_DIALOGUE: u32 = 36865;
pub const AL_EFFECT_DEDICATED_LOW_FREQUENCY_EFFECT: u32 = 36864;
pub const AL_SOFT_buffer_samples: u32 = 1;
pub const AL_MONO_SOFT: u32 = 5376;
pub const AL_STEREO_SOFT: u32 = 5377;
pub const AL_REAR_SOFT: u32 = 5378;
pub const AL_QUAD_SOFT: u32 = 5379;
pub const AL_5POINT1_SOFT: u32 = 5380;
pub const AL_6POINT1_SOFT: u32 = 5381;
pub const AL_7POINT1_SOFT: u32 = 5382;
pub const AL_BYTE_SOFT: u32 = 5120;
pub const AL_UNSIGNED_BYTE_SOFT: u32 = 5121;
pub const AL_SHORT_SOFT: u32 = 5122;
pub const AL_UNSIGNED_SHORT_SOFT: u32 = 5123;
pub const AL_INT_SOFT: u32 = 5124;
pub const AL_UNSIGNED_INT_SOFT: u32 = 5125;
pub const AL_FLOAT_SOFT: u32 = 5126;
pub const AL_DOUBLE_SOFT: u32 = 5127;
pub const AL_BYTE3_SOFT: u32 = 5128;
pub const AL_UNSIGNED_BYTE3_SOFT: u32 = 5129;
pub const AL_MONO8_SOFT: u32 = 4352;
pub const AL_MONO16_SOFT: u32 = 4353;
pub const AL_MONO32F_SOFT: u32 = 65552;
pub const AL_STEREO8_SOFT: u32 = 4354;
pub const AL_STEREO16_SOFT: u32 = 4355;
pub const AL_STEREO32F_SOFT: u32 = 65553;
pub const AL_QUAD8_SOFT: u32 = 4612;
pub const AL_QUAD16_SOFT: u32 = 4613;
pub const AL_QUAD32F_SOFT: u32 = 4614;
pub const AL_REAR8_SOFT: u32 = 4615;
pub const AL_REAR16_SOFT: u32 = 4616;
pub const AL_REAR32F_SOFT: u32 = 4617;
pub const AL_5POINT1_8_SOFT: u32 = 4618;
pub const AL_5POINT1_16_SOFT: u32 = 4619;
pub const AL_5POINT1_32F_SOFT: u32 = 4620;
pub const AL_6POINT1_8_SOFT: u32 = 4621;
pub const AL_6POINT1_16_SOFT: u32 = 4622;
pub const AL_6POINT1_32F_SOFT: u32 = 4623;
pub const AL_7POINT1_8_SOFT: u32 = 4624;
pub const AL_7POINT1_16_SOFT: u32 = 4625;
pub const AL_7POINT1_32F_SOFT: u32 = 4626;
pub const AL_INTERNAL_FORMAT_SOFT: u32 = 8200;
pub const AL_BYTE_LENGTH_SOFT: u32 = 8201;
pub const AL_SAMPLE_LENGTH_SOFT: u32 = 8202;
pub const AL_SEC_LENGTH_SOFT: u32 = 8203;
pub const AL_SOFT_direct_channels: u32 = 1;
pub const AL_DIRECT_CHANNELS_SOFT: u32 = 4147;
pub const ALC_SOFT_loopback: u32 = 1;
pub const ALC_FORMAT_CHANNELS_SOFT: u32 = 6544;
pub const ALC_FORMAT_TYPE_SOFT: u32 = 6545;
pub const ALC_BYTE_SOFT: u32 = 5120;
pub const ALC_UNSIGNED_BYTE_SOFT: u32 = 5121;
pub const ALC_SHORT_SOFT: u32 = 5122;
pub const ALC_UNSIGNED_SHORT_SOFT: u32 = 5123;
pub const ALC_INT_SOFT: u32 = 5124;
pub const ALC_UNSIGNED_INT_SOFT: u32 = 5125;
pub const ALC_FLOAT_SOFT: u32 = 5126;
pub const ALC_MONO_SOFT: u32 = 5376;
pub const ALC_STEREO_SOFT: u32 = 5377;
pub const ALC_QUAD_SOFT: u32 = 5379;
pub const ALC_5POINT1_SOFT: u32 = 5380;
pub const ALC_6POINT1_SOFT: u32 = 5381;
pub const ALC_7POINT1_SOFT: u32 = 5382;
pub const AL_EXT_STEREO_ANGLES: u32 = 1;
pub const AL_STEREO_ANGLES: u32 = 4144;
pub const AL_EXT_SOURCE_RADIUS: u32 = 1;
pub const AL_SOURCE_RADIUS: u32 = 4145;
pub const AL_SOFT_source_latency: u32 = 1;
pub const AL_SAMPLE_OFFSET_LATENCY_SOFT: u32 = 4608;
pub const AL_SEC_OFFSET_LATENCY_SOFT: u32 = 4609;
pub const ALC_EXT_DEFAULT_FILTER_ORDER: u32 = 1;
pub const ALC_DEFAULT_FILTER_ORDER: u32 = 4352;
pub const AL_SOFT_deferred_updates: u32 = 1;
pub const AL_DEFERRED_UPDATES_SOFT: u32 = 49154;
pub const AL_SOFT_block_alignment: u32 = 1;
pub const AL_UNPACK_BLOCK_ALIGNMENT_SOFT: u32 = 8204;
pub const AL_PACK_BLOCK_ALIGNMENT_SOFT: u32 = 8205;
pub const AL_SOFT_MSADPCM: u32 = 1;
pub const AL_FORMAT_MONO_MSADPCM_SOFT: u32 = 4866;
pub const AL_FORMAT_STEREO_MSADPCM_SOFT: u32 = 4867;
pub const AL_SOFT_source_length: u32 = 1;
pub const AL_SOFT_buffer_length_query: u32 = 1;
pub const ALC_SOFT_pause_device: u32 = 1;
pub const AL_EXT_BFORMAT: u32 = 1;
pub const AL_FORMAT_BFORMAT2D_8: u32 = 131105;
pub const AL_FORMAT_BFORMAT2D_16: u32 = 131106;
pub const AL_FORMAT_BFORMAT2D_FLOAT32: u32 = 131107;
pub const AL_FORMAT_BFORMAT3D_8: u32 = 131121;
pub const AL_FORMAT_BFORMAT3D_16: u32 = 131122;
pub const AL_FORMAT_BFORMAT3D_FLOAT32: u32 = 131123;
pub const AL_EXT_MULAW_BFORMAT: u32 = 1;
pub const AL_FORMAT_BFORMAT2D_MULAW: u32 = 65585;
pub const AL_FORMAT_BFORMAT3D_MULAW: u32 = 65586;
pub const ALC_SOFT_HRTF: u32 = 1;
pub const ALC_HRTF_SOFT: u32 = 6546;
pub const ALC_DONT_CARE_SOFT: u32 = 2;
pub const ALC_HRTF_STATUS_SOFT: u32 = 6547;
pub const ALC_HRTF_DISABLED_SOFT: u32 = 0;
pub const ALC_HRTF_ENABLED_SOFT: u32 = 1;
pub const ALC_HRTF_DENIED_SOFT: u32 = 2;
pub const ALC_HRTF_REQUIRED_SOFT: u32 = 3;
pub const ALC_HRTF_HEADPHONES_DETECTED_SOFT: u32 = 4;
pub const ALC_HRTF_UNSUPPORTED_FORMAT_SOFT: u32 = 5;
pub const ALC_NUM_HRTF_SPECIFIERS_SOFT: u32 = 6548;
pub const ALC_HRTF_SPECIFIER_SOFT: u32 = 6549;
pub const ALC_HRTF_ID_SOFT: u32 = 6550;
pub const AL_SOFT_gain_clamp_ex: u32 = 1;
pub const AL_GAIN_LIMIT_SOFT: u32 = 8206;
pub const AL_NUM_RESAMPLERS_SOFT: u32 = 4624;
pub const AL_DEFAULT_RESAMPLER_SOFT: u32 = 4625;
pub const AL_SOURCE_RESAMPLER_SOFT: u32 = 4626;
pub const AL_RESAMPLER_NAME_SOFT: u32 = 4627;
pub const AL_SOURCE_SPATIALIZE_SOFT: u32 = 4628;
pub const AL_AUTO_SOFT: u32 = 2;
pub const ALC_OUTPUT_LIMITER_SOFT: u32 = 6554;
pub const ALC_SOFT_device_clock: u32 = 1;
pub const ALC_DEVICE_CLOCK_SOFT: u32 = 5632;
pub const ALC_DEVICE_LATENCY_SOFT: u32 = 5633;
pub const ALC_DEVICE_CLOCK_LATENCY_SOFT: u32 = 5634;
pub const AL_SAMPLE_OFFSET_CLOCK_SOFT: u32 = 4610;
pub const AL_SEC_OFFSET_CLOCK_SOFT: u32 = 4611;
pub const AL_SOFT_direct_channels_remix: u32 = 1;
pub const AL_DROP_UNMATCHED_SOFT: u32 = 1;
pub const AL_REMIX_UNMATCHED_SOFT: u32 = 2;
pub const AL_SOFT_bformat_ex: u32 = 1;
pub const AL_AMBISONIC_LAYOUT_SOFT: u32 = 6551;
pub const AL_AMBISONIC_SCALING_SOFT: u32 = 6552;
pub const AL_FUMA_SOFT: u32 = 0;
pub const AL_ACN_SOFT: u32 = 1;
pub const AL_SN3D_SOFT: u32 = 1;
pub const AL_N3D_SOFT: u32 = 2;
pub const ALC_SOFT_loopback_bformat: u32 = 1;
pub const ALC_AMBISONIC_LAYOUT_SOFT: u32 = 6551;
pub const ALC_AMBISONIC_SCALING_SOFT: u32 = 6552;
pub const ALC_AMBISONIC_ORDER_SOFT: u32 = 6553;
pub const ALC_MAX_AMBISONIC_ORDER_SOFT: u32 = 6555;
pub const ALC_BFORMAT3D_SOFT: u32 = 5383;
pub const ALC_FUMA_SOFT: u32 = 0;
pub const ALC_ACN_SOFT: u32 = 1;
pub const ALC_SN3D_SOFT: u32 = 1;
pub const ALC_N3D_SOFT: u32 = 2;
pub const AL_EFFECTSLOT_TARGET_SOFT: u32 = 6556;
pub const AL_SOFT_events: u32 = 1;
pub const AL_EVENT_CALLBACK_FUNCTION_SOFT: u32 = 6562;
pub const AL_EVENT_CALLBACK_USER_PARAM_SOFT: u32 = 6563;
pub const AL_EVENT_TYPE_BUFFER_COMPLETED_SOFT: u32 = 6564;
pub const AL_EVENT_TYPE_SOURCE_STATE_CHANGED_SOFT: u32 = 6565;
pub const AL_EVENT_TYPE_DISCONNECTED_SOFT: u32 = 6566;
pub const AL_BUFFER_CALLBACK_FUNCTION_SOFT: u32 = 6560;
pub const AL_BUFFER_CALLBACK_USER_PARAM_SOFT: u32 = 6561;
pub const AL_FORMAT_UHJ2CHN8_SOFT: u32 = 6562;
pub const AL_FORMAT_UHJ2CHN16_SOFT: u32 = 6563;
pub const AL_FORMAT_UHJ2CHN_FLOAT32_SOFT: u32 = 6564;
pub const AL_FORMAT_UHJ3CHN8_SOFT: u32 = 6565;
pub const AL_FORMAT_UHJ3CHN16_SOFT: u32 = 6566;
pub const AL_FORMAT_UHJ3CHN_FLOAT32_SOFT: u32 = 6567;
pub const AL_FORMAT_UHJ4CHN8_SOFT: u32 = 6568;
pub const AL_FORMAT_UHJ4CHN16_SOFT: u32 = 6569;
pub const AL_FORMAT_UHJ4CHN_FLOAT32_SOFT: u32 = 6570;
pub const AL_STEREO_MODE_SOFT: u32 = 6576;
pub const AL_NORMAL_SOFT: u32 = 0;
pub const AL_SUPER_STEREO_SOFT: u32 = 1;
pub const AL_SUPER_STEREO_WIDTH_SOFT: u32 = 6577;
pub const AL_FORMAT_UHJ2CHN_MULAW_SOFT: u32 = 6579;
pub const AL_FORMAT_UHJ2CHN_ALAW_SOFT: u32 = 6580;
pub const AL_FORMAT_UHJ2CHN_IMA4_SOFT: u32 = 6581;
pub const AL_FORMAT_UHJ2CHN_MSADPCM_SOFT: u32 = 6582;
pub const AL_FORMAT_UHJ3CHN_MULAW_SOFT: u32 = 6583;
pub const AL_FORMAT_UHJ3CHN_ALAW_SOFT: u32 = 6584;
pub const AL_FORMAT_UHJ4CHN_MULAW_SOFT: u32 = 6585;
pub const AL_FORMAT_UHJ4CHN_ALAW_SOFT: u32 = 6586;
pub const ALC_OUTPUT_MODE_SOFT: u32 = 6572;
pub const ALC_ANY_SOFT: u32 = 6573;
pub const ALC_STEREO_BASIC_SOFT: u32 = 6574;
pub const ALC_STEREO_UHJ_SOFT: u32 = 6575;
pub const ALC_STEREO_HRTF_SOFT: u32 = 6578;
pub const ALC_SURROUND_5_1_SOFT: u32 = 5380;
pub const ALC_SURROUND_6_1_SOFT: u32 = 5381;
pub const ALC_SURROUND_7_1_SOFT: u32 = 5382;
pub const ALC_CONTEXT_FLAGS_EXT: u32 = 6607;
pub const ALC_CONTEXT_DEBUG_BIT_EXT: u32 = 1;
pub const AL_DONT_CARE_EXT: u32 = 2;
pub const AL_DEBUG_OUTPUT_EXT: u32 = 6578;
pub const AL_DEBUG_CALLBACK_FUNCTION_EXT: u32 = 6579;
pub const AL_DEBUG_CALLBACK_USER_PARAM_EXT: u32 = 6580;
pub const AL_DEBUG_SOURCE_API_EXT: u32 = 6581;
pub const AL_DEBUG_SOURCE_AUDIO_SYSTEM_EXT: u32 = 6582;
pub const AL_DEBUG_SOURCE_THIRD_PARTY_EXT: u32 = 6583;
pub const AL_DEBUG_SOURCE_APPLICATION_EXT: u32 = 6584;
pub const AL_DEBUG_SOURCE_OTHER_EXT: u32 = 6585;
pub const AL_DEBUG_TYPE_ERROR_EXT: u32 = 6586;
pub const AL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_EXT: u32 = 6587;
pub const AL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_EXT: u32 = 6588;
pub const AL_DEBUG_TYPE_PORTABILITY_EXT: u32 = 6589;
pub const AL_DEBUG_TYPE_PERFORMANCE_EXT: u32 = 6590;
pub const AL_DEBUG_TYPE_MARKER_EXT: u32 = 6591;
pub const AL_DEBUG_TYPE_PUSH_GROUP_EXT: u32 = 6592;
pub const AL_DEBUG_TYPE_POP_GROUP_EXT: u32 = 6593;
pub const AL_DEBUG_TYPE_OTHER_EXT: u32 = 6594;
pub const AL_DEBUG_SEVERITY_HIGH_EXT: u32 = 6595;
pub const AL_DEBUG_SEVERITY_MEDIUM_EXT: u32 = 6596;
pub const AL_DEBUG_SEVERITY_LOW_EXT: u32 = 6597;
pub const AL_DEBUG_SEVERITY_NOTIFICATION_EXT: u32 = 6598;
pub const AL_DEBUG_LOGGED_MESSAGES_EXT: u32 = 6599;
pub const AL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_EXT: u32 = 6600;
pub const AL_MAX_DEBUG_MESSAGE_LENGTH_EXT: u32 = 6601;
pub const AL_MAX_DEBUG_LOGGED_MESSAGES_EXT: u32 = 6602;
pub const AL_MAX_DEBUG_GROUP_STACK_DEPTH_EXT: u32 = 6603;
pub const AL_MAX_LABEL_LENGTH_EXT: u32 = 6604;
pub const AL_STACK_OVERFLOW_EXT: u32 = 6605;
pub const AL_STACK_UNDERFLOW_EXT: u32 = 6606;
pub const AL_CONTEXT_FLAGS_EXT: u32 = 6607;
pub const AL_BUFFER_EXT: u32 = 4105;
pub const AL_SOURCE_EXT: u32 = 6608;
pub const AL_FILTER_EXT: u32 = 6609;
pub const AL_EFFECT_EXT: u32 = 6610;
pub const AL_AUXILIARY_EFFECT_SLOT_EXT: u32 = 6611;
pub const ALC_PLAYBACK_DEVICE_SOFT: u32 = 6612;
pub const ALC_CAPTURE_DEVICE_SOFT: u32 = 6613;
pub const ALC_EVENT_TYPE_DEFAULT_DEVICE_CHANGED_SOFT: u32 = 6614;
pub const ALC_EVENT_TYPE_DEVICE_ADDED_SOFT: u32 = 6615;
pub const ALC_EVENT_TYPE_DEVICE_REMOVED_SOFT: u32 = 6616;
pub const ALC_EVENT_SUPPORTED_SOFT: u32 = 6617;
pub const ALC_EVENT_NOT_SUPPORTED_SOFT: u32 = 6618;
pub const AL_UNPACK_AMBISONIC_ORDER_SOFT: u32 = 6557;
pub type wchar_t = ::std::os::raw::c_ushort;
pub type max_align_t = f64;
pub type va_list = *mut ::std::os::raw::c_char;
extern "C" {
    pub fn __va_start(arg1: *mut *mut ::std::os::raw::c_char, ...);
}
pub type __vcrt_bool = bool;
extern "C" {
    pub fn __security_init_cookie();
}
extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize) -> !;
}
extern "C" {
    pub static mut __security_cookie: usize;
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_longlong;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_int;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_uint;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
pub type _alsoft_int64_t = i64;
pub type _alsoft_uint64_t = u64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ALCdevice {
    _unused: [u8; 0]
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ALCcontext {
    _unused: [u8; 0]
}
/// 8-bit boolean
pub type ALCboolean = ::std::os::raw::c_char;
/// character
pub type ALCchar = ::std::os::raw::c_char;
/// signed 8-bit integer
pub type ALCbyte = ::std::os::raw::c_schar;
/// unsigned 8-bit integer
pub type ALCubyte = ::std::os::raw::c_uchar;
/// signed 16-bit integer
pub type ALCshort = ::std::os::raw::c_short;
/// unsigned 16-bit integer
pub type ALCushort = ::std::os::raw::c_ushort;
/// signed 32-bit integer
pub type ALCint = ::std::os::raw::c_int;
/// unsigned 32-bit integer
pub type ALCuint = ::std::os::raw::c_uint;
/// non-negative 32-bit integer size
pub type ALCsizei = ::std::os::raw::c_int;
/// 32-bit enumeration value
pub type ALCenum = ::std::os::raw::c_int;
/// 32-bit IEEE-754 floating-point
pub type ALCfloat = f32;
/// 64-bit IEEE-754 floating-point
pub type ALCdouble = f64;
/// void type (for opaque pointers only)
pub type ALCvoid = ::std::os::raw::c_void;
extern "C" {
    /// Create and attach a context to the given device.
    pub fn alcCreateContext(device: *mut ALCdevice, attrlist: *const ALCint) -> *mut ALCcontext;
}
extern "C" {
    /// Makes the given context the active process-wide context. Passing NULL clears
    /// the active context.
    pub fn alcMakeContextCurrent(context: *mut ALCcontext) -> ALCboolean;
}
extern "C" {
    /// Resumes processing updates for the given context.
    pub fn alcProcessContext(context: *mut ALCcontext);
}
extern "C" {
    /// Suspends updates for the given context.
    pub fn alcSuspendContext(context: *mut ALCcontext);
}
extern "C" {
    /// Remove a context from its device and destroys it.
    pub fn alcDestroyContext(context: *mut ALCcontext);
}
extern "C" {
    /// Returns the currently active context.
    pub fn alcGetCurrentContext() -> *mut ALCcontext;
}
extern "C" {
    /// Returns the device that a particular context is attached to.
    pub fn alcGetContextsDevice(context: *mut ALCcontext) -> *mut ALCdevice;
}
extern "C" {
    /// Opens the named playback device.
    pub fn alcOpenDevice(devicename: *const ALCchar) -> *mut ALCdevice;
}
extern "C" {
    /// Closes the given playback device.
    pub fn alcCloseDevice(device: *mut ALCdevice) -> ALCboolean;
}
extern "C" {
    /// Obtain the most recent Device error.
    pub fn alcGetError(device: *mut ALCdevice) -> ALCenum;
}
extern "C" {
    /// Query for the presence of an extension on the device. Pass a NULL device to
    /// query a device-inspecific extension.
    pub fn alcIsExtensionPresent(device: *mut ALCdevice, extname: *const ALCchar) -> ALCboolean;
}
extern "C" {
    /// Retrieve the address of a function. Given a non-NULL device, the returned
    /// function may be device-specific.
    pub fn alcGetProcAddress(device: *mut ALCdevice, funcname: *const ALCchar) -> *mut ALCvoid;
}
extern "C" {
    /// Retrieve the value of an enum. Given a non-NULL device, the returned value
    /// may be device-specific.
    pub fn alcGetEnumValue(device: *mut ALCdevice, enumname: *const ALCchar) -> ALCenum;
}
extern "C" {
    /// Returns information about the device, and error strings.
    pub fn alcGetString(device: *mut ALCdevice, param: ALCenum) -> *const ALCchar;
}
extern "C" {
    /// Returns information about the device and the version of OpenAL.
    pub fn alcGetIntegerv(
        device: *mut ALCdevice,
        param: ALCenum,
        size: ALCsizei,
        values: *mut ALCint
    );
}
extern "C" {
    /// Opens the named capture device with the given frequency, format, and buffer
    /// size.
    pub fn alcCaptureOpenDevice(
        devicename: *const ALCchar,
        frequency: ALCuint,
        format: ALCenum,
        buffersize: ALCsizei
    ) -> *mut ALCdevice;
}
extern "C" {
    /// Closes the given capture device.
    pub fn alcCaptureCloseDevice(device: *mut ALCdevice) -> ALCboolean;
}
extern "C" {
    /// Starts capturing samples into the device buffer.
    pub fn alcCaptureStart(device: *mut ALCdevice);
}
extern "C" {
    /// Stops capturing samples. Samples in the device buffer remain available.
    pub fn alcCaptureStop(device: *mut ALCdevice);
}
extern "C" {
    /// Reads samples from the device buffer.
    pub fn alcCaptureSamples(device: *mut ALCdevice, buffer: *mut ALCvoid, samples: ALCsizei);
}
pub type LPALCCREATECONTEXT = ::std::option::Option<
    unsafe extern "C" fn(device: *mut ALCdevice, attrlist: *const ALCint) -> *mut ALCcontext
>;
pub type LPALCMAKECONTEXTCURRENT =
    ::std::option::Option<unsafe extern "C" fn(context: *mut ALCcontext) -> ALCboolean>;
pub type LPALCPROCESSCONTEXT =
    ::std::option::Option<unsafe extern "C" fn(context: *mut ALCcontext)>;
pub type LPALCSUSPENDCONTEXT =
    ::std::option::Option<unsafe extern "C" fn(context: *mut ALCcontext)>;
pub type LPALCDESTROYCONTEXT =
    ::std::option::Option<unsafe extern "C" fn(context: *mut ALCcontext)>;
pub type LPALCGETCURRENTCONTEXT = ::std::option::Option<unsafe extern "C" fn() -> *mut ALCcontext>;
pub type LPALCGETCONTEXTSDEVICE =
    ::std::option::Option<unsafe extern "C" fn(context: *mut ALCcontext) -> *mut ALCdevice>;
pub type LPALCOPENDEVICE =
    ::std::option::Option<unsafe extern "C" fn(devicename: *const ALCchar) -> *mut ALCdevice>;
pub type LPALCCLOSEDEVICE =
    ::std::option::Option<unsafe extern "C" fn(device: *mut ALCdevice) -> ALCboolean>;
pub type LPALCGETERROR =
    ::std::option::Option<unsafe extern "C" fn(device: *mut ALCdevice) -> ALCenum>;
pub type LPALCISEXTENSIONPRESENT = ::std::option::Option<
    unsafe extern "C" fn(device: *mut ALCdevice, extname: *const ALCchar) -> ALCboolean
>;
pub type LPALCGETPROCADDRESS = ::std::option::Option<
    unsafe extern "C" fn(device: *mut ALCdevice, funcname: *const ALCchar) -> *mut ALCvoid
>;
pub type LPALCGETENUMVALUE = ::std::option::Option<
    unsafe extern "C" fn(device: *mut ALCdevice, enumname: *const ALCchar) -> ALCenum
>;
pub type LPALCGETSTRING = ::std::option::Option<
    unsafe extern "C" fn(device: *mut ALCdevice, param: ALCenum) -> *const ALCchar
>;
pub type LPALCGETINTEGERV = ::std::option::Option<
    unsafe extern "C" fn(
        device: *mut ALCdevice,
        param: ALCenum,
        size: ALCsizei,
        values: *mut ALCint
    )
>;
pub type LPALCCAPTUREOPENDEVICE = ::std::option::Option<
    unsafe extern "C" fn(
        devicename: *const ALCchar,
        frequency: ALCuint,
        format: ALCenum,
        buffersize: ALCsizei
    ) -> *mut ALCdevice
>;
pub type LPALCCAPTURECLOSEDEVICE =
    ::std::option::Option<unsafe extern "C" fn(device: *mut ALCdevice) -> ALCboolean>;
pub type LPALCCAPTURESTART = ::std::option::Option<unsafe extern "C" fn(device: *mut ALCdevice)>;
pub type LPALCCAPTURESTOP = ::std::option::Option<unsafe extern "C" fn(device: *mut ALCdevice)>;
pub type LPALCCAPTURESAMPLES = ::std::option::Option<
    unsafe extern "C" fn(device: *mut ALCdevice, buffer: *mut ALCvoid, samples: ALCsizei)
>;
/// 8-bit boolean
pub type ALboolean = ::std::os::raw::c_char;
/// character
pub type ALchar = ::std::os::raw::c_char;
/// signed 8-bit integer
pub type ALbyte = ::std::os::raw::c_schar;
/// unsigned 8-bit integer
pub type ALubyte = ::std::os::raw::c_uchar;
/// signed 16-bit integer
pub type ALshort = ::std::os::raw::c_short;
/// unsigned 16-bit integer
pub type ALushort = ::std::os::raw::c_ushort;
/// signed 32-bit integer
pub type ALint = ::std::os::raw::c_int;
/// unsigned 32-bit integer
pub type ALuint = ::std::os::raw::c_uint;
/// non-negative 32-bit integer size
pub type ALsizei = ::std::os::raw::c_int;
/// 32-bit enumeration value
pub type ALenum = ::std::os::raw::c_int;
/// 32-bit IEEE-754 floating-point
pub type ALfloat = f32;
/// 64-bit IEEE-754 floating-point
pub type ALdouble = f64;
/// void type (opaque pointers only)
pub type ALvoid = ::std::os::raw::c_void;
extern "C" {
    pub fn alEnable(capability: ALenum);
}
extern "C" {
    pub fn alDisable(capability: ALenum);
}
extern "C" {
    pub fn alIsEnabled(capability: ALenum) -> ALboolean;
}
extern "C" {
    pub fn alDopplerFactor(value: ALfloat);
}
extern "C" {
    pub fn alDopplerVelocity(value: ALfloat);
}
extern "C" {
    pub fn alSpeedOfSound(value: ALfloat);
}
extern "C" {
    pub fn alDistanceModel(distanceModel: ALenum);
}
extern "C" {
    pub fn alGetString(param: ALenum) -> *const ALchar;
}
extern "C" {
    pub fn alGetBooleanv(param: ALenum, values: *mut ALboolean);
}
extern "C" {
    pub fn alGetIntegerv(param: ALenum, values: *mut ALint);
}
extern "C" {
    pub fn alGetFloatv(param: ALenum, values: *mut ALfloat);
}
extern "C" {
    pub fn alGetDoublev(param: ALenum, values: *mut ALdouble);
}
extern "C" {
    pub fn alGetBoolean(param: ALenum) -> ALboolean;
}
extern "C" {
    pub fn alGetInteger(param: ALenum) -> ALint;
}
extern "C" {
    pub fn alGetFloat(param: ALenum) -> ALfloat;
}
extern "C" {
    pub fn alGetDouble(param: ALenum) -> ALdouble;
}
extern "C" {
    /// Obtain the first error generated in the AL context since the last call to
    /// this function.
    pub fn alGetError() -> ALenum;
}
extern "C" {
    /// Query for the presence of an extension on the AL context.
    pub fn alIsExtensionPresent(extname: *const ALchar) -> ALboolean;
}
extern "C" {
    /// Retrieve the address of a function. The returned function may be context-
    /// specific.
    pub fn alGetProcAddress(fname: *const ALchar) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    /// Retrieve the value of an enum. The returned value may be context-specific.
    pub fn alGetEnumValue(ename: *const ALchar) -> ALenum;
}
extern "C" {
    pub fn alListenerf(param: ALenum, value: ALfloat);
}
extern "C" {
    pub fn alListener3f(param: ALenum, value1: ALfloat, value2: ALfloat, value3: ALfloat);
}
extern "C" {
    pub fn alListenerfv(param: ALenum, values: *const ALfloat);
}
extern "C" {
    pub fn alListeneri(param: ALenum, value: ALint);
}
extern "C" {
    pub fn alListener3i(param: ALenum, value1: ALint, value2: ALint, value3: ALint);
}
extern "C" {
    pub fn alListeneriv(param: ALenum, values: *const ALint);
}
extern "C" {
    pub fn alGetListenerf(param: ALenum, value: *mut ALfloat);
}
extern "C" {
    pub fn alGetListener3f(
        param: ALenum,
        value1: *mut ALfloat,
        value2: *mut ALfloat,
        value3: *mut ALfloat
    );
}
extern "C" {
    pub fn alGetListenerfv(param: ALenum, values: *mut ALfloat);
}
extern "C" {
    pub fn alGetListeneri(param: ALenum, value: *mut ALint);
}
extern "C" {
    pub fn alGetListener3i(
        param: ALenum,
        value1: *mut ALint,
        value2: *mut ALint,
        value3: *mut ALint
    );
}
extern "C" {
    pub fn alGetListeneriv(param: ALenum, values: *mut ALint);
}
extern "C" {
    /// Create source objects.
    pub fn alGenSources(n: ALsizei, sources: *mut ALuint);
}
extern "C" {
    /// Delete source objects.
    pub fn alDeleteSources(n: ALsizei, sources: *const ALuint);
}
extern "C" {
    /// Verify an ID is for a valid source.
    pub fn alIsSource(source: ALuint) -> ALboolean;
}
extern "C" {
    pub fn alSourcef(source: ALuint, param: ALenum, value: ALfloat);
}
extern "C" {
    pub fn alSource3f(
        source: ALuint,
        param: ALenum,
        value1: ALfloat,
        value2: ALfloat,
        value3: ALfloat
    );
}
extern "C" {
    pub fn alSourcefv(source: ALuint, param: ALenum, values: *const ALfloat);
}
extern "C" {
    pub fn alSourcei(source: ALuint, param: ALenum, value: ALint);
}
extern "C" {
    pub fn alSource3i(source: ALuint, param: ALenum, value1: ALint, value2: ALint, value3: ALint);
}
extern "C" {
    pub fn alSourceiv(source: ALuint, param: ALenum, values: *const ALint);
}
extern "C" {
    pub fn alGetSourcef(source: ALuint, param: ALenum, value: *mut ALfloat);
}
extern "C" {
    pub fn alGetSource3f(
        source: ALuint,
        param: ALenum,
        value1: *mut ALfloat,
        value2: *mut ALfloat,
        value3: *mut ALfloat
    );
}
extern "C" {
    pub fn alGetSourcefv(source: ALuint, param: ALenum, values: *mut ALfloat);
}
extern "C" {
    pub fn alGetSourcei(source: ALuint, param: ALenum, value: *mut ALint);
}
extern "C" {
    pub fn alGetSource3i(
        source: ALuint,
        param: ALenum,
        value1: *mut ALint,
        value2: *mut ALint,
        value3: *mut ALint
    );
}
extern "C" {
    pub fn alGetSourceiv(source: ALuint, param: ALenum, values: *mut ALint);
}
extern "C" {
    /// Play, restart, or resume a source, setting its state to AL_PLAYING.
    pub fn alSourcePlay(source: ALuint);
}
extern "C" {
    /// Stop a source, setting its state to AL_STOPPED if playing or paused.
    pub fn alSourceStop(source: ALuint);
}
extern "C" {
    /// Rewind a source, setting its state to AL_INITIAL.
    pub fn alSourceRewind(source: ALuint);
}
extern "C" {
    /// Pause a source, setting its state to AL_PAUSED if playing.
    pub fn alSourcePause(source: ALuint);
}
extern "C" {
    /// Play, restart, or resume a list of sources atomically.
    pub fn alSourcePlayv(n: ALsizei, sources: *const ALuint);
}
extern "C" {
    /// Stop a list of sources atomically.
    pub fn alSourceStopv(n: ALsizei, sources: *const ALuint);
}
extern "C" {
    /// Rewind a list of sources atomically.
    pub fn alSourceRewindv(n: ALsizei, sources: *const ALuint);
}
extern "C" {
    /// Pause a list of sources atomically.
    pub fn alSourcePausev(n: ALsizei, sources: *const ALuint);
}
extern "C" {
    /// Queue buffers onto a source
    pub fn alSourceQueueBuffers(source: ALuint, nb: ALsizei, buffers: *const ALuint);
}
extern "C" {
    /// Unqueue processed buffers from a source
    pub fn alSourceUnqueueBuffers(source: ALuint, nb: ALsizei, buffers: *mut ALuint);
}
extern "C" {
    /// Create buffer objects
    pub fn alGenBuffers(n: ALsizei, buffers: *mut ALuint);
}
extern "C" {
    /// Delete buffer objects
    pub fn alDeleteBuffers(n: ALsizei, buffers: *const ALuint);
}
extern "C" {
    /// Verify an ID is a valid buffer (including the NULL buffer)
    pub fn alIsBuffer(buffer: ALuint) -> ALboolean;
}
extern "C" {
    /// Copies data into the buffer, interpreting it using the specified format and
    /// samplerate.
    pub fn alBufferData(
        buffer: ALuint,
        format: ALenum,
        data: *const ALvoid,
        size: ALsizei,
        samplerate: ALsizei
    );
}
extern "C" {
    pub fn alBufferf(buffer: ALuint, param: ALenum, value: ALfloat);
}
extern "C" {
    pub fn alBuffer3f(
        buffer: ALuint,
        param: ALenum,
        value1: ALfloat,
        value2: ALfloat,
        value3: ALfloat
    );
}
extern "C" {
    pub fn alBufferfv(buffer: ALuint, param: ALenum, values: *const ALfloat);
}
extern "C" {
    pub fn alBufferi(buffer: ALuint, param: ALenum, value: ALint);
}
extern "C" {
    pub fn alBuffer3i(buffer: ALuint, param: ALenum, value1: ALint, value2: ALint, value3: ALint);
}
extern "C" {
    pub fn alBufferiv(buffer: ALuint, param: ALenum, values: *const ALint);
}
extern "C" {
    pub fn alGetBufferf(buffer: ALuint, param: ALenum, value: *mut ALfloat);
}
extern "C" {
    pub fn alGetBuffer3f(
        buffer: ALuint,
        param: ALenum,
        value1: *mut ALfloat,
        value2: *mut ALfloat,
        value3: *mut ALfloat
    );
}
extern "C" {
    pub fn alGetBufferfv(buffer: ALuint, param: ALenum, values: *mut ALfloat);
}
extern "C" {
    pub fn alGetBufferi(buffer: ALuint, param: ALenum, value: *mut ALint);
}
extern "C" {
    pub fn alGetBuffer3i(
        buffer: ALuint,
        param: ALenum,
        value1: *mut ALint,
        value2: *mut ALint,
        value3: *mut ALint
    );
}
extern "C" {
    pub fn alGetBufferiv(buffer: ALuint, param: ALenum, values: *mut ALint);
}
pub type LPALENABLE = ::std::option::Option<unsafe extern "C" fn(capability: ALenum)>;
pub type LPALDISABLE = ::std::option::Option<unsafe extern "C" fn(capability: ALenum)>;
pub type LPALISENABLED =
    ::std::option::Option<unsafe extern "C" fn(capability: ALenum) -> ALboolean>;
pub type LPALGETSTRING =
    ::std::option::Option<unsafe extern "C" fn(param: ALenum) -> *const ALchar>;
pub type LPALGETBOOLEANV =
    ::std::option::Option<unsafe extern "C" fn(param: ALenum, values: *mut ALboolean)>;
pub type LPALGETINTEGERV =
    ::std::option::Option<unsafe extern "C" fn(param: ALenum, values: *mut ALint)>;
pub type LPALGETFLOATV =
    ::std::option::Option<unsafe extern "C" fn(param: ALenum, values: *mut ALfloat)>;
pub type LPALGETDOUBLEV =
    ::std::option::Option<unsafe extern "C" fn(param: ALenum, values: *mut ALdouble)>;
pub type LPALGETBOOLEAN = ::std::option::Option<unsafe extern "C" fn(param: ALenum) -> ALboolean>;
pub type LPALGETINTEGER = ::std::option::Option<unsafe extern "C" fn(param: ALenum) -> ALint>;
pub type LPALGETFLOAT = ::std::option::Option<unsafe extern "C" fn(param: ALenum) -> ALfloat>;
pub type LPALGETDOUBLE = ::std::option::Option<unsafe extern "C" fn(param: ALenum) -> ALdouble>;
pub type LPALGETERROR = ::std::option::Option<unsafe extern "C" fn() -> ALenum>;
pub type LPALISEXTENSIONPRESENT =
    ::std::option::Option<unsafe extern "C" fn(extname: *const ALchar) -> ALboolean>;
pub type LPALGETPROCADDRESS = ::std::option::Option<
    unsafe extern "C" fn(fname: *const ALchar) -> *mut ::std::os::raw::c_void
>;
pub type LPALGETENUMVALUE =
    ::std::option::Option<unsafe extern "C" fn(ename: *const ALchar) -> ALenum>;
pub type LPALLISTENERF = ::std::option::Option<unsafe extern "C" fn(param: ALenum, value: ALfloat)>;
pub type LPALLISTENER3F = ::std::option::Option<
    unsafe extern "C" fn(param: ALenum, value1: ALfloat, value2: ALfloat, value3: ALfloat)
>;
pub type LPALLISTENERFV =
    ::std::option::Option<unsafe extern "C" fn(param: ALenum, values: *const ALfloat)>;
pub type LPALLISTENERI = ::std::option::Option<unsafe extern "C" fn(param: ALenum, value: ALint)>;
pub type LPALLISTENER3I = ::std::option::Option<
    unsafe extern "C" fn(param: ALenum, value1: ALint, value2: ALint, value3: ALint)
>;
pub type LPALLISTENERIV =
    ::std::option::Option<unsafe extern "C" fn(param: ALenum, values: *const ALint)>;
pub type LPALGETLISTENERF =
    ::std::option::Option<unsafe extern "C" fn(param: ALenum, value: *mut ALfloat)>;
pub type LPALGETLISTENER3F = ::std::option::Option<
    unsafe extern "C" fn(
        param: ALenum,
        value1: *mut ALfloat,
        value2: *mut ALfloat,
        value3: *mut ALfloat
    )
>;
pub type LPALGETLISTENERFV =
    ::std::option::Option<unsafe extern "C" fn(param: ALenum, values: *mut ALfloat)>;
pub type LPALGETLISTENERI =
    ::std::option::Option<unsafe extern "C" fn(param: ALenum, value: *mut ALint)>;
pub type LPALGETLISTENER3I = ::std::option::Option<
    unsafe extern "C" fn(param: ALenum, value1: *mut ALint, value2: *mut ALint, value3: *mut ALint)
>;
pub type LPALGETLISTENERIV =
    ::std::option::Option<unsafe extern "C" fn(param: ALenum, values: *mut ALint)>;
pub type LPALGENSOURCES =
    ::std::option::Option<unsafe extern "C" fn(n: ALsizei, sources: *mut ALuint)>;
pub type LPALDELETESOURCES =
    ::std::option::Option<unsafe extern "C" fn(n: ALsizei, sources: *const ALuint)>;
pub type LPALISSOURCE = ::std::option::Option<unsafe extern "C" fn(source: ALuint) -> ALboolean>;
pub type LPALSOURCEF =
    ::std::option::Option<unsafe extern "C" fn(source: ALuint, param: ALenum, value: ALfloat)>;
pub type LPALSOURCE3F = ::std::option::Option<
    unsafe extern "C" fn(
        source: ALuint,
        param: ALenum,
        value1: ALfloat,
        value2: ALfloat,
        value3: ALfloat
    )
>;
pub type LPALSOURCEFV = ::std::option::Option<
    unsafe extern "C" fn(source: ALuint, param: ALenum, values: *const ALfloat)
>;
pub type LPALSOURCEI =
    ::std::option::Option<unsafe extern "C" fn(source: ALuint, param: ALenum, value: ALint)>;
pub type LPALSOURCE3I = ::std::option::Option<
    unsafe extern "C" fn(
        source: ALuint,
        param: ALenum,
        value1: ALint,
        value2: ALint,
        value3: ALint
    )
>;
pub type LPALSOURCEIV = ::std::option::Option<
    unsafe extern "C" fn(source: ALuint, param: ALenum, values: *const ALint)
>;
pub type LPALGETSOURCEF =
    ::std::option::Option<unsafe extern "C" fn(source: ALuint, param: ALenum, value: *mut ALfloat)>;
pub type LPALGETSOURCE3F = ::std::option::Option<
    unsafe extern "C" fn(
        source: ALuint,
        param: ALenum,
        value1: *mut ALfloat,
        value2: *mut ALfloat,
        value3: *mut ALfloat
    )
>;
pub type LPALGETSOURCEFV = ::std::option::Option<
    unsafe extern "C" fn(source: ALuint, param: ALenum, values: *mut ALfloat)
>;
pub type LPALGETSOURCEI =
    ::std::option::Option<unsafe extern "C" fn(source: ALuint, param: ALenum, value: *mut ALint)>;
pub type LPALGETSOURCE3I = ::std::option::Option<
    unsafe extern "C" fn(
        source: ALuint,
        param: ALenum,
        value1: *mut ALint,
        value2: *mut ALint,
        value3: *mut ALint
    )
>;
pub type LPALGETSOURCEIV =
    ::std::option::Option<unsafe extern "C" fn(source: ALuint, param: ALenum, values: *mut ALint)>;
pub type LPALSOURCEPLAYV =
    ::std::option::Option<unsafe extern "C" fn(n: ALsizei, sources: *const ALuint)>;
pub type LPALSOURCESTOPV =
    ::std::option::Option<unsafe extern "C" fn(n: ALsizei, sources: *const ALuint)>;
pub type LPALSOURCEREWINDV =
    ::std::option::Option<unsafe extern "C" fn(n: ALsizei, sources: *const ALuint)>;
pub type LPALSOURCEPAUSEV =
    ::std::option::Option<unsafe extern "C" fn(n: ALsizei, sources: *const ALuint)>;
pub type LPALSOURCEPLAY = ::std::option::Option<unsafe extern "C" fn(source: ALuint)>;
pub type LPALSOURCESTOP = ::std::option::Option<unsafe extern "C" fn(source: ALuint)>;
pub type LPALSOURCEREWIND = ::std::option::Option<unsafe extern "C" fn(source: ALuint)>;
pub type LPALSOURCEPAUSE = ::std::option::Option<unsafe extern "C" fn(source: ALuint)>;
pub type LPALSOURCEQUEUEBUFFERS = ::std::option::Option<
    unsafe extern "C" fn(source: ALuint, nb: ALsizei, buffers: *const ALuint)
>;
pub type LPALSOURCEUNQUEUEBUFFERS =
    ::std::option::Option<unsafe extern "C" fn(source: ALuint, nb: ALsizei, buffers: *mut ALuint)>;
pub type LPALGENBUFFERS =
    ::std::option::Option<unsafe extern "C" fn(n: ALsizei, buffers: *mut ALuint)>;
pub type LPALDELETEBUFFERS =
    ::std::option::Option<unsafe extern "C" fn(n: ALsizei, buffers: *const ALuint)>;
pub type LPALISBUFFER = ::std::option::Option<unsafe extern "C" fn(buffer: ALuint) -> ALboolean>;
pub type LPALBUFFERDATA = ::std::option::Option<
    unsafe extern "C" fn(
        buffer: ALuint,
        format: ALenum,
        data: *const ALvoid,
        size: ALsizei,
        samplerate: ALsizei
    )
>;
pub type LPALBUFFERF =
    ::std::option::Option<unsafe extern "C" fn(buffer: ALuint, param: ALenum, value: ALfloat)>;
pub type LPALBUFFER3F = ::std::option::Option<
    unsafe extern "C" fn(
        buffer: ALuint,
        param: ALenum,
        value1: ALfloat,
        value2: ALfloat,
        value3: ALfloat
    )
>;
pub type LPALBUFFERFV = ::std::option::Option<
    unsafe extern "C" fn(buffer: ALuint, param: ALenum, values: *const ALfloat)
>;
pub type LPALBUFFERI =
    ::std::option::Option<unsafe extern "C" fn(buffer: ALuint, param: ALenum, value: ALint)>;
pub type LPALBUFFER3I = ::std::option::Option<
    unsafe extern "C" fn(
        buffer: ALuint,
        param: ALenum,
        value1: ALint,
        value2: ALint,
        value3: ALint
    )
>;
pub type LPALBUFFERIV = ::std::option::Option<
    unsafe extern "C" fn(buffer: ALuint, param: ALenum, values: *const ALint)
>;
pub type LPALGETBUFFERF =
    ::std::option::Option<unsafe extern "C" fn(buffer: ALuint, param: ALenum, value: *mut ALfloat)>;
pub type LPALGETBUFFER3F = ::std::option::Option<
    unsafe extern "C" fn(
        buffer: ALuint,
        param: ALenum,
        value1: *mut ALfloat,
        value2: *mut ALfloat,
        value3: *mut ALfloat
    )
>;
pub type LPALGETBUFFERFV = ::std::option::Option<
    unsafe extern "C" fn(buffer: ALuint, param: ALenum, values: *mut ALfloat)
>;
pub type LPALGETBUFFERI =
    ::std::option::Option<unsafe extern "C" fn(buffer: ALuint, param: ALenum, value: *mut ALint)>;
pub type LPALGETBUFFER3I = ::std::option::Option<
    unsafe extern "C" fn(
        buffer: ALuint,
        param: ALenum,
        value1: *mut ALint,
        value2: *mut ALint,
        value3: *mut ALint
    )
>;
pub type LPALGETBUFFERIV =
    ::std::option::Option<unsafe extern "C" fn(buffer: ALuint, param: ALenum, values: *mut ALint)>;
pub type LPALDOPPLERFACTOR = ::std::option::Option<unsafe extern "C" fn(value: ALfloat)>;
pub type LPALDOPPLERVELOCITY = ::std::option::Option<unsafe extern "C" fn(value: ALfloat)>;
pub type LPALSPEEDOFSOUND = ::std::option::Option<unsafe extern "C" fn(value: ALfloat)>;
pub type LPALDISTANCEMODEL = ::std::option::Option<unsafe extern "C" fn(distanceModel: ALenum)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GUID {
    _unused: [u8; 0]
}
pub type PFNALBUFFERDATASTATICPROC = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: ALuint,
        arg2: ALenum,
        arg3: *mut ALvoid,
        arg4: ALsizei,
        arg5: ALsizei
    )
>;
pub type __crt_bool = bool;
extern "C" {
    pub fn _invalid_parameter_noinfo();
}
extern "C" {
    pub fn _invalid_parameter_noinfo_noreturn() -> !;
}
extern "C" {
    pub fn _invoke_watson(
        _Expression: *const wchar_t,
        _FunctionName: *const wchar_t,
        _FileName: *const wchar_t,
        _LineNo: ::std::os::raw::c_uint,
        _Reserved: usize
    ) -> !;
}
pub type errno_t = ::std::os::raw::c_int;
pub type wint_t = ::std::os::raw::c_ushort;
pub type wctype_t = ::std::os::raw::c_ushort;
pub type __time32_t = ::std::os::raw::c_long;
pub type __time64_t = ::std::os::raw::c_longlong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data_public {
    pub _locale_pctype: *const ::std::os::raw::c_ushort,
    pub _locale_mb_cur_max: ::std::os::raw::c_int,
    pub _locale_lc_codepage: ::std::os::raw::c_uint
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __crt_locale_data_public"]
        [::std::mem::size_of::<__crt_locale_data_public>() - 16usize];
    ["Alignment of __crt_locale_data_public"]
        [::std::mem::align_of::<__crt_locale_data_public>() - 8usize];
    ["Offset of field: __crt_locale_data_public::_locale_pctype"]
        [::std::mem::offset_of!(__crt_locale_data_public, _locale_pctype) - 0usize];
    ["Offset of field: __crt_locale_data_public::_locale_mb_cur_max"]
        [::std::mem::offset_of!(__crt_locale_data_public, _locale_mb_cur_max) - 8usize];
    ["Offset of field: __crt_locale_data_public::_locale_lc_codepage"]
        [::std::mem::offset_of!(__crt_locale_data_public, _locale_lc_codepage) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_pointers {
    pub locinfo: *mut __crt_locale_data,
    pub mbcinfo: *mut __crt_multibyte_data
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __crt_locale_pointers"][::std::mem::size_of::<__crt_locale_pointers>() - 16usize];
    ["Alignment of __crt_locale_pointers"]
        [::std::mem::align_of::<__crt_locale_pointers>() - 8usize];
    ["Offset of field: __crt_locale_pointers::locinfo"]
        [::std::mem::offset_of!(__crt_locale_pointers, locinfo) - 0usize];
    ["Offset of field: __crt_locale_pointers::mbcinfo"]
        [::std::mem::offset_of!(__crt_locale_pointers, mbcinfo) - 8usize];
};
pub type _locale_t = *mut __crt_locale_pointers;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Mbstatet {
    pub _Wchar: ::std::os::raw::c_ulong,
    pub _Byte: ::std::os::raw::c_ushort,
    pub _State: ::std::os::raw::c_ushort
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _Mbstatet"][::std::mem::size_of::<_Mbstatet>() - 8usize];
    ["Alignment of _Mbstatet"][::std::mem::align_of::<_Mbstatet>() - 4usize];
    ["Offset of field: _Mbstatet::_Wchar"][::std::mem::offset_of!(_Mbstatet, _Wchar) - 0usize];
    ["Offset of field: _Mbstatet::_Byte"][::std::mem::offset_of!(_Mbstatet, _Byte) - 4usize];
    ["Offset of field: _Mbstatet::_State"][::std::mem::offset_of!(_Mbstatet, _State) - 6usize];
};
pub type mbstate_t = _Mbstatet;
pub type time_t = __time64_t;
pub type rsize_t = usize;
extern "C" {
    pub fn _clearfp() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _controlfp(
        _NewValue: ::std::os::raw::c_uint,
        _Mask: ::std::os::raw::c_uint
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _set_controlfp(_NewValue: ::std::os::raw::c_uint, _Mask: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn _controlfp_s(
        _CurrentState: *mut ::std::os::raw::c_uint,
        _NewValue: ::std::os::raw::c_uint,
        _Mask: ::std::os::raw::c_uint
    ) -> errno_t;
}
extern "C" {
    pub fn _statusfp() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _fpreset();
}
extern "C" {
    pub fn _control87(
        _NewValue: ::std::os::raw::c_uint,
        _Mask: ::std::os::raw::c_uint
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn __fpecode() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn __fpe_flt_rounds() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _copysign(_Number: f64, _Sign: f64) -> f64;
}
extern "C" {
    pub fn _chgsign(_X: f64) -> f64;
}
extern "C" {
    pub fn _scalb(_X: f64, _Y: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn _logb(_X: f64) -> f64;
}
extern "C" {
    pub fn _nextafter(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn _finite(_X: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _isnan(_X: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fpclass(_X: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _scalbf(_X: f32, _Y: ::std::os::raw::c_long) -> f32;
}
extern "C" {
    pub fn fpreset();
}
pub type LPALGENEFFECTS =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALsizei, arg2: *mut ALuint)>;
pub type LPALDELETEEFFECTS =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALsizei, arg2: *const ALuint)>;
pub type LPALISEFFECT = ::std::option::Option<unsafe extern "C" fn(arg1: ALuint) -> ALboolean>;
pub type LPALEFFECTI =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum, arg3: ALint)>;
pub type LPALEFFECTIV =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum, arg3: *const ALint)>;
pub type LPALEFFECTF =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum, arg3: ALfloat)>;
pub type LPALEFFECTFV =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum, arg3: *const ALfloat)>;
pub type LPALGETEFFECTI =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum, arg3: *mut ALint)>;
pub type LPALGETEFFECTIV =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum, arg3: *mut ALint)>;
pub type LPALGETEFFECTF =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum, arg3: *mut ALfloat)>;
pub type LPALGETEFFECTFV =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum, arg3: *mut ALfloat)>;
pub type LPALGENFILTERS =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALsizei, arg2: *mut ALuint)>;
pub type LPALDELETEFILTERS =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALsizei, arg2: *const ALuint)>;
pub type LPALISFILTER = ::std::option::Option<unsafe extern "C" fn(arg1: ALuint) -> ALboolean>;
pub type LPALFILTERI =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum, arg3: ALint)>;
pub type LPALFILTERIV =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum, arg3: *const ALint)>;
pub type LPALFILTERF =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum, arg3: ALfloat)>;
pub type LPALFILTERFV =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum, arg3: *const ALfloat)>;
pub type LPALGETFILTERI =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum, arg3: *mut ALint)>;
pub type LPALGETFILTERIV =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum, arg3: *mut ALint)>;
pub type LPALGETFILTERF =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum, arg3: *mut ALfloat)>;
pub type LPALGETFILTERFV =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum, arg3: *mut ALfloat)>;
pub type LPALGENAUXILIARYEFFECTSLOTS =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALsizei, arg2: *mut ALuint)>;
pub type LPALDELETEAUXILIARYEFFECTSLOTS =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALsizei, arg2: *const ALuint)>;
pub type LPALISAUXILIARYEFFECTSLOT =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint) -> ALboolean>;
pub type LPALAUXILIARYEFFECTSLOTI =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum, arg3: ALint)>;
pub type LPALAUXILIARYEFFECTSLOTIV =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum, arg3: *const ALint)>;
pub type LPALAUXILIARYEFFECTSLOTF =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum, arg3: ALfloat)>;
pub type LPALAUXILIARYEFFECTSLOTFV =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum, arg3: *const ALfloat)>;
pub type LPALGETAUXILIARYEFFECTSLOTI =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum, arg3: *mut ALint)>;
pub type LPALGETAUXILIARYEFFECTSLOTIV =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum, arg3: *mut ALint)>;
pub type LPALGETAUXILIARYEFFECTSLOTF =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum, arg3: *mut ALfloat)>;
pub type LPALGETAUXILIARYEFFECTSLOTFV =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum, arg3: *mut ALfloat)>;
pub type PFNALCSETTHREADCONTEXTPROC =
    ::std::option::Option<unsafe extern "C" fn(context: *mut ALCcontext) -> ALCboolean>;
pub type PFNALCGETTHREADCONTEXTPROC =
    ::std::option::Option<unsafe extern "C" fn() -> *mut ALCcontext>;
pub type PFNALBUFFERSUBDATASOFTPROC = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: ALuint,
        arg2: ALenum,
        arg3: *const ALvoid,
        arg4: ALsizei,
        arg5: ALsizei
    )
>;
pub type LPALFOLDBACKCALLBACK =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALenum, arg2: ALsizei)>;
pub type LPALREQUESTFOLDBACKSTART = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: ALenum,
        arg2: ALsizei,
        arg3: ALsizei,
        arg4: *mut ALfloat,
        arg5: LPALFOLDBACKCALLBACK
    )
>;
pub type LPALREQUESTFOLDBACKSTOP = ::std::option::Option<unsafe extern "C" fn()>;
pub type LPALBUFFERSAMPLESSOFT = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: ALuint,
        arg2: ALuint,
        arg3: ALenum,
        arg4: ALsizei,
        arg5: ALenum,
        arg6: ALenum,
        arg7: *const ALvoid
    )
>;
pub type LPALBUFFERSUBSAMPLESSOFT = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: ALuint,
        arg2: ALsizei,
        arg3: ALsizei,
        arg4: ALenum,
        arg5: ALenum,
        arg6: *const ALvoid
    )
>;
pub type LPALGETBUFFERSAMPLESSOFT = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: ALuint,
        arg2: ALsizei,
        arg3: ALsizei,
        arg4: ALenum,
        arg5: ALenum,
        arg6: *mut ALvoid
    )
>;
pub type LPALISBUFFERFORMATSUPPORTEDSOFT =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALenum) -> ALboolean>;
pub type LPALCLOOPBACKOPENDEVICESOFT =
    ::std::option::Option<unsafe extern "C" fn(arg1: *const ALCchar) -> *mut ALCdevice>;
pub type LPALCISRENDERFORMATSUPPORTEDSOFT = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ALCdevice,
        arg2: ALCsizei,
        arg3: ALCenum,
        arg4: ALCenum
    ) -> ALCboolean
>;
pub type LPALCRENDERSAMPLESSOFT = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut ALCdevice, arg2: *mut ALCvoid, arg3: ALCsizei)
>;
pub type ALint64SOFT = _alsoft_int64_t;
pub type ALuint64SOFT = _alsoft_uint64_t;
pub type LPALSOURCEDSOFT =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum, arg3: ALdouble)>;
pub type LPALSOURCE3DSOFT = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: ALuint,
        arg2: ALenum,
        arg3: ALdouble,
        arg4: ALdouble,
        arg5: ALdouble
    )
>;
pub type LPALSOURCEDVSOFT =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum, arg3: *const ALdouble)>;
pub type LPALGETSOURCEDSOFT =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum, arg3: *mut ALdouble)>;
pub type LPALGETSOURCE3DSOFT = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: ALuint,
        arg2: ALenum,
        arg3: *mut ALdouble,
        arg4: *mut ALdouble,
        arg5: *mut ALdouble
    )
>;
pub type LPALGETSOURCEDVSOFT =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum, arg3: *mut ALdouble)>;
pub type LPALSOURCEI64SOFT =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum, arg3: ALint64SOFT)>;
pub type LPALSOURCE3I64SOFT = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: ALuint,
        arg2: ALenum,
        arg3: ALint64SOFT,
        arg4: ALint64SOFT,
        arg5: ALint64SOFT
    )
>;
pub type LPALSOURCEI64VSOFT = ::std::option::Option<
    unsafe extern "C" fn(arg1: ALuint, arg2: ALenum, arg3: *const ALint64SOFT)
>;
pub type LPALGETSOURCEI64SOFT =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum, arg3: *mut ALint64SOFT)>;
pub type LPALGETSOURCE3I64SOFT = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: ALuint,
        arg2: ALenum,
        arg3: *mut ALint64SOFT,
        arg4: *mut ALint64SOFT,
        arg5: *mut ALint64SOFT
    )
>;
pub type LPALGETSOURCEI64VSOFT =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum, arg3: *mut ALint64SOFT)>;
pub type LPALDEFERUPDATESSOFT = ::std::option::Option<unsafe extern "C" fn()>;
pub type LPALPROCESSUPDATESSOFT = ::std::option::Option<unsafe extern "C" fn()>;
pub type LPALCDEVICEPAUSESOFT = ::std::option::Option<unsafe extern "C" fn(device: *mut ALCdevice)>;
pub type LPALCDEVICERESUMESOFT =
    ::std::option::Option<unsafe extern "C" fn(device: *mut ALCdevice)>;
pub type LPALCGETSTRINGISOFT = ::std::option::Option<
    unsafe extern "C" fn(
        device: *mut ALCdevice,
        paramName: ALCenum,
        index: ALCsizei
    ) -> *const ALCchar
>;
pub type LPALCRESETDEVICESOFT = ::std::option::Option<
    unsafe extern "C" fn(device: *mut ALCdevice, attribs: *const ALCint) -> ALCboolean
>;
pub type LPALGETSTRINGISOFT =
    ::std::option::Option<unsafe extern "C" fn(pname: ALenum, index: ALsizei) -> *const ALchar>;
pub type ALCint64SOFT = _alsoft_int64_t;
pub type ALCuint64SOFT = _alsoft_uint64_t;
pub type LPALCGETINTEGER64VSOFT = ::std::option::Option<
    unsafe extern "C" fn(
        device: *mut ALCdevice,
        pname: ALCenum,
        size: ALsizei,
        values: *mut ALCint64SOFT
    )
>;
pub type ALEVENTPROCSOFT = ::std::option::Option<
    unsafe extern "C" fn(
        eventType: ALenum,
        object: ALuint,
        param: ALuint,
        length: ALsizei,
        message: *const ALchar,
        userParam: *mut ::std::os::raw::c_void
    )
>;
pub type LPALEVENTCONTROLSOFT = ::std::option::Option<
    unsafe extern "C" fn(count: ALsizei, types: *const ALenum, enable: ALboolean)
>;
pub type LPALEVENTCALLBACKSOFT = ::std::option::Option<
    unsafe extern "C" fn(callback: ALEVENTPROCSOFT, userParam: *mut ::std::os::raw::c_void)
>;
pub type LPALGETPOINTERSOFT =
    ::std::option::Option<unsafe extern "C" fn(pname: ALenum) -> *mut ::std::os::raw::c_void>;
pub type LPALGETPOINTERVSOFT = ::std::option::Option<
    unsafe extern "C" fn(pname: ALenum, values: *mut *mut ::std::os::raw::c_void)
>;
pub type LPALCREOPENDEVICESOFT = ::std::option::Option<
    unsafe extern "C" fn(
        device: *mut ALCdevice,
        deviceName: *const ALCchar,
        attribs: *const ALCint
    ) -> ALCboolean
>;
pub type ALBUFFERCALLBACKTYPESOFT = ::std::option::Option<
    unsafe extern "C" fn(
        userptr: *mut ALvoid,
        sampledata: *mut ALvoid,
        numbytes: ALsizei
    ) -> ALsizei
>;
pub type LPALBUFFERCALLBACKSOFT = ::std::option::Option<
    unsafe extern "C" fn(
        buffer: ALuint,
        format: ALenum,
        freq: ALsizei,
        callback: ALBUFFERCALLBACKTYPESOFT,
        userptr: *mut ALvoid
    )
>;
pub type LPALGETBUFFERPTRSOFT = ::std::option::Option<
    unsafe extern "C" fn(buffer: ALuint, param: ALenum, value: *mut *mut ALvoid)
>;
pub type LPALGETBUFFER3PTRSOFT = ::std::option::Option<
    unsafe extern "C" fn(
        buffer: ALuint,
        param: ALenum,
        value1: *mut *mut ALvoid,
        value2: *mut *mut ALvoid,
        value3: *mut *mut ALvoid
    )
>;
pub type LPALGETBUFFERPTRVSOFT = ::std::option::Option<
    unsafe extern "C" fn(buffer: ALuint, param: ALenum, values: *mut *mut ALvoid)
>;
pub type LPALSOURCEPLAYATTIMESOFT =
    ::std::option::Option<unsafe extern "C" fn(source: ALuint, start_time: ALint64SOFT)>;
pub type LPALSOURCEPLAYATTIMEVSOFT = ::std::option::Option<
    unsafe extern "C" fn(n: ALsizei, sources: *const ALuint, start_time: ALint64SOFT)
>;
pub type ALDEBUGPROCEXT = ::std::option::Option<
    unsafe extern "C" fn(
        source: ALenum,
        type_: ALenum,
        id: ALuint,
        severity: ALenum,
        length: ALsizei,
        message: *const ALchar,
        userParam: *mut ::std::os::raw::c_void
    )
>;
pub type LPALDEBUGMESSAGECALLBACKEXT = ::std::option::Option<
    unsafe extern "C" fn(callback: ALDEBUGPROCEXT, userParam: *mut ::std::os::raw::c_void)
>;
pub type LPALDEBUGMESSAGEINSERTEXT = ::std::option::Option<
    unsafe extern "C" fn(
        source: ALenum,
        type_: ALenum,
        id: ALuint,
        severity: ALenum,
        length: ALsizei,
        message: *const ALchar
    )
>;
pub type LPALDEBUGMESSAGECONTROLEXT = ::std::option::Option<
    unsafe extern "C" fn(
        source: ALenum,
        type_: ALenum,
        severity: ALenum,
        count: ALsizei,
        ids: *const ALuint,
        enable: ALboolean
    )
>;
pub type LPALPUSHDEBUGGROUPEXT = ::std::option::Option<
    unsafe extern "C" fn(source: ALenum, id: ALuint, length: ALsizei, message: *const ALchar)
>;
pub type LPALPOPDEBUGGROUPEXT = ::std::option::Option<unsafe extern "C" fn()>;
pub type LPALGETDEBUGMESSAGELOGEXT = ::std::option::Option<
    unsafe extern "C" fn(
        count: ALuint,
        logBufSize: ALsizei,
        sources: *mut ALenum,
        types: *mut ALenum,
        ids: *mut ALuint,
        severities: *mut ALenum,
        lengths: *mut ALsizei,
        logBuf: *mut ALchar
    ) -> ALuint
>;
pub type LPALOBJECTLABELEXT = ::std::option::Option<
    unsafe extern "C" fn(identifier: ALenum, name: ALuint, length: ALsizei, label: *const ALchar)
>;
pub type LPALGETOBJECTLABELEXT = ::std::option::Option<
    unsafe extern "C" fn(
        identifier: ALenum,
        name: ALuint,
        bufSize: ALsizei,
        length: *mut ALsizei,
        label: *mut ALchar
    )
>;
pub type LPALGETPOINTEREXT =
    ::std::option::Option<unsafe extern "C" fn(pname: ALenum) -> *mut ::std::os::raw::c_void>;
pub type LPALGETPOINTERVEXT = ::std::option::Option<
    unsafe extern "C" fn(pname: ALenum, values: *mut *mut ::std::os::raw::c_void)
>;
pub type ALCEVENTPROCTYPESOFT = ::std::option::Option<
    unsafe extern "C" fn(
        eventType: ALCenum,
        deviceType: ALCenum,
        device: *mut ALCdevice,
        length: ALCsizei,
        message: *const ALCchar,
        userParam: *mut ::std::os::raw::c_void
    )
>;
pub type LPALCEVENTISSUPPORTEDSOFT =
    ::std::option::Option<unsafe extern "C" fn(eventType: ALCenum, deviceType: ALCenum) -> ALCenum>;
pub type LPALCEVENTCONTROLSOFT = ::std::option::Option<
    unsafe extern "C" fn(count: ALCsizei, events: *const ALCenum, enable: ALCboolean) -> ALCboolean
>;
pub type LPALCEVENTCALLBACKSOFT = ::std::option::Option<
    unsafe extern "C" fn(callback: ALCEVENTPROCTYPESOFT, userParam: *mut ::std::os::raw::c_void)
>;
pub type LPALCGETPROCADDRESS2 = ::std::option::Option<
    unsafe extern "C" fn(device: *mut ALCdevice, funcname: *const ALCchar) -> *mut ALCvoid
>;
pub type LPALENABLEDIRECT =
    ::std::option::Option<unsafe extern "C" fn(context: *mut ALCcontext, capability: ALenum)>;
pub type LPALDISABLEDIRECT =
    ::std::option::Option<unsafe extern "C" fn(context: *mut ALCcontext, capability: ALenum)>;
pub type LPALISENABLEDDIRECT = ::std::option::Option<
    unsafe extern "C" fn(context: *mut ALCcontext, capability: ALenum) -> ALboolean
>;
pub type LPALDOPPLERFACTORDIRECT =
    ::std::option::Option<unsafe extern "C" fn(context: *mut ALCcontext, value: ALfloat)>;
pub type LPALSPEEDOFSOUNDDIRECT =
    ::std::option::Option<unsafe extern "C" fn(context: *mut ALCcontext, value: ALfloat)>;
pub type LPALDISTANCEMODELDIRECT =
    ::std::option::Option<unsafe extern "C" fn(context: *mut ALCcontext, distanceModel: ALenum)>;
pub type LPALGETSTRINGDIRECT = ::std::option::Option<
    unsafe extern "C" fn(context: *mut ALCcontext, param: ALenum) -> *const ALchar
>;
pub type LPALGETBOOLEANVDIRECT = ::std::option::Option<
    unsafe extern "C" fn(context: *mut ALCcontext, param: ALenum, values: *mut ALboolean)
>;
pub type LPALGETINTEGERVDIRECT = ::std::option::Option<
    unsafe extern "C" fn(context: *mut ALCcontext, param: ALenum, values: *mut ALint)
>;
pub type LPALGETFLOATVDIRECT = ::std::option::Option<
    unsafe extern "C" fn(context: *mut ALCcontext, param: ALenum, values: *mut ALfloat)
>;
pub type LPALGETDOUBLEVDIRECT = ::std::option::Option<
    unsafe extern "C" fn(context: *mut ALCcontext, param: ALenum, values: *mut ALdouble)
>;
pub type LPALGETBOOLEANDIRECT = ::std::option::Option<
    unsafe extern "C" fn(context: *mut ALCcontext, param: ALenum) -> ALboolean
>;
pub type LPALGETINTEGERDIRECT =
    ::std::option::Option<unsafe extern "C" fn(context: *mut ALCcontext, param: ALenum) -> ALint>;
pub type LPALGETFLOATDIRECT =
    ::std::option::Option<unsafe extern "C" fn(context: *mut ALCcontext, param: ALenum) -> ALfloat>;
pub type LPALGETDOUBLEDIRECT = ::std::option::Option<
    unsafe extern "C" fn(context: *mut ALCcontext, param: ALenum) -> ALdouble
>;
pub type LPALGETERRORDIRECT =
    ::std::option::Option<unsafe extern "C" fn(context: *mut ALCcontext) -> ALenum>;
pub type LPALISEXTENSIONPRESENTDIRECT = ::std::option::Option<
    unsafe extern "C" fn(context: *mut ALCcontext, extname: *const ALchar) -> ALboolean
>;
pub type LPALGETPROCADDRESSDIRECT = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ALCcontext,
        fname: *const ALchar
    ) -> *mut ::std::os::raw::c_void
>;
pub type LPALGETENUMVALUEDIRECT = ::std::option::Option<
    unsafe extern "C" fn(context: *mut ALCcontext, ename: *const ALchar) -> ALenum
>;
pub type LPALLISTENERFDIRECT = ::std::option::Option<
    unsafe extern "C" fn(context: *mut ALCcontext, param: ALenum, value: ALfloat)
>;
pub type LPALLISTENER3FDIRECT = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ALCcontext,
        param: ALenum,
        value1: ALfloat,
        value2: ALfloat,
        value3: ALfloat
    )
>;
pub type LPALLISTENERFVDIRECT = ::std::option::Option<
    unsafe extern "C" fn(context: *mut ALCcontext, param: ALenum, values: *const ALfloat)
>;
pub type LPALLISTENERIDIRECT = ::std::option::Option<
    unsafe extern "C" fn(context: *mut ALCcontext, param: ALenum, value: ALint)
>;
pub type LPALLISTENER3IDIRECT = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ALCcontext,
        param: ALenum,
        value1: ALint,
        value2: ALint,
        value3: ALint
    )
>;
pub type LPALLISTENERIVDIRECT = ::std::option::Option<
    unsafe extern "C" fn(context: *mut ALCcontext, param: ALenum, values: *const ALint)
>;
pub type LPALGETLISTENERFDIRECT = ::std::option::Option<
    unsafe extern "C" fn(context: *mut ALCcontext, param: ALenum, value: *mut ALfloat)
>;
pub type LPALGETLISTENER3FDIRECT = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ALCcontext,
        param: ALenum,
        value1: *mut ALfloat,
        value2: *mut ALfloat,
        value3: *mut ALfloat
    )
>;
pub type LPALGETLISTENERFVDIRECT = ::std::option::Option<
    unsafe extern "C" fn(context: *mut ALCcontext, param: ALenum, values: *mut ALfloat)
>;
pub type LPALGETLISTENERIDIRECT = ::std::option::Option<
    unsafe extern "C" fn(context: *mut ALCcontext, param: ALenum, value: *mut ALint)
>;
pub type LPALGETLISTENER3IDIRECT = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ALCcontext,
        param: ALenum,
        value1: *mut ALint,
        value2: *mut ALint,
        value3: *mut ALint
    )
>;
pub type LPALGETLISTENERIVDIRECT = ::std::option::Option<
    unsafe extern "C" fn(context: *mut ALCcontext, param: ALenum, values: *mut ALint)
>;
pub type LPALGENSOURCESDIRECT = ::std::option::Option<
    unsafe extern "C" fn(context: *mut ALCcontext, n: ALsizei, sources: *mut ALuint)
>;
pub type LPALDELETESOURCESDIRECT = ::std::option::Option<
    unsafe extern "C" fn(context: *mut ALCcontext, n: ALsizei, sources: *const ALuint)
>;
pub type LPALISSOURCEDIRECT = ::std::option::Option<
    unsafe extern "C" fn(context: *mut ALCcontext, source: ALuint) -> ALboolean
>;
pub type LPALSOURCEFDIRECT = ::std::option::Option<
    unsafe extern "C" fn(context: *mut ALCcontext, source: ALuint, param: ALenum, value: ALfloat)
>;
pub type LPALSOURCE3FDIRECT = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ALCcontext,
        source: ALuint,
        param: ALenum,
        value1: ALfloat,
        value2: ALfloat,
        value3: ALfloat
    )
>;
pub type LPALSOURCEFVDIRECT = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ALCcontext,
        source: ALuint,
        param: ALenum,
        values: *const ALfloat
    )
>;
pub type LPALSOURCEIDIRECT = ::std::option::Option<
    unsafe extern "C" fn(context: *mut ALCcontext, source: ALuint, param: ALenum, value: ALint)
>;
pub type LPALSOURCE3IDIRECT = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ALCcontext,
        source: ALuint,
        param: ALenum,
        value1: ALint,
        value2: ALint,
        value3: ALint
    )
>;
pub type LPALSOURCEIVDIRECT = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ALCcontext,
        source: ALuint,
        param: ALenum,
        values: *const ALint
    )
>;
pub type LPALGETSOURCEFDIRECT = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ALCcontext,
        source: ALuint,
        param: ALenum,
        value: *mut ALfloat
    )
>;
pub type LPALGETSOURCE3FDIRECT = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ALCcontext,
        source: ALuint,
        param: ALenum,
        value1: *mut ALfloat,
        value2: *mut ALfloat,
        value3: *mut ALfloat
    )
>;
pub type LPALGETSOURCEFVDIRECT = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ALCcontext,
        source: ALuint,
        param: ALenum,
        values: *mut ALfloat
    )
>;
pub type LPALGETSOURCEIDIRECT = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ALCcontext,
        source: ALuint,
        param: ALenum,
        value: *mut ALint
    )
>;
pub type LPALGETSOURCE3IDIRECT = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ALCcontext,
        source: ALuint,
        param: ALenum,
        value1: *mut ALint,
        value2: *mut ALint,
        value3: *mut ALint
    )
>;
pub type LPALGETSOURCEIVDIRECT = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ALCcontext,
        source: ALuint,
        param: ALenum,
        values: *mut ALint
    )
>;
pub type LPALSOURCEPLAYDIRECT =
    ::std::option::Option<unsafe extern "C" fn(context: *mut ALCcontext, source: ALuint)>;
pub type LPALSOURCESTOPDIRECT =
    ::std::option::Option<unsafe extern "C" fn(context: *mut ALCcontext, source: ALuint)>;
pub type LPALSOURCEREWINDDIRECT =
    ::std::option::Option<unsafe extern "C" fn(context: *mut ALCcontext, source: ALuint)>;
pub type LPALSOURCEPAUSEDIRECT =
    ::std::option::Option<unsafe extern "C" fn(context: *mut ALCcontext, source: ALuint)>;
pub type LPALSOURCEPLAYVDIRECT = ::std::option::Option<
    unsafe extern "C" fn(context: *mut ALCcontext, n: ALsizei, sources: *const ALuint)
>;
pub type LPALSOURCESTOPVDIRECT = ::std::option::Option<
    unsafe extern "C" fn(context: *mut ALCcontext, n: ALsizei, sources: *const ALuint)
>;
pub type LPALSOURCEREWINDVDIRECT = ::std::option::Option<
    unsafe extern "C" fn(context: *mut ALCcontext, n: ALsizei, sources: *const ALuint)
>;
pub type LPALSOURCEPAUSEVDIRECT = ::std::option::Option<
    unsafe extern "C" fn(context: *mut ALCcontext, n: ALsizei, sources: *const ALuint)
>;
pub type LPALSOURCEQUEUEBUFFERSDIRECT = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ALCcontext,
        source: ALuint,
        nb: ALsizei,
        buffers: *const ALuint
    )
>;
pub type LPALSOURCEUNQUEUEBUFFERSDIRECT = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ALCcontext,
        source: ALuint,
        nb: ALsizei,
        buffers: *mut ALuint
    )
>;
pub type LPALGENBUFFERSDIRECT = ::std::option::Option<
    unsafe extern "C" fn(context: *mut ALCcontext, n: ALsizei, buffers: *mut ALuint)
>;
pub type LPALDELETEBUFFERSDIRECT = ::std::option::Option<
    unsafe extern "C" fn(context: *mut ALCcontext, n: ALsizei, buffers: *const ALuint)
>;
pub type LPALISBUFFERDIRECT = ::std::option::Option<
    unsafe extern "C" fn(context: *mut ALCcontext, buffer: ALuint) -> ALboolean
>;
pub type LPALBUFFERDATADIRECT = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ALCcontext,
        buffer: ALuint,
        format: ALenum,
        data: *const ALvoid,
        size: ALsizei,
        samplerate: ALsizei
    )
>;
pub type LPALBUFFERFDIRECT = ::std::option::Option<
    unsafe extern "C" fn(context: *mut ALCcontext, buffer: ALuint, param: ALenum, value: ALfloat)
>;
pub type LPALBUFFER3FDIRECT = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ALCcontext,
        buffer: ALuint,
        param: ALenum,
        value1: ALfloat,
        value2: ALfloat,
        value3: ALfloat
    )
>;
pub type LPALBUFFERFVDIRECT = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ALCcontext,
        buffer: ALuint,
        param: ALenum,
        values: *const ALfloat
    )
>;
pub type LPALBUFFERIDIRECT = ::std::option::Option<
    unsafe extern "C" fn(context: *mut ALCcontext, buffer: ALuint, param: ALenum, value: ALint)
>;
pub type LPALBUFFER3IDIRECT = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ALCcontext,
        buffer: ALuint,
        param: ALenum,
        value1: ALint,
        value2: ALint,
        value3: ALint
    )
>;
pub type LPALBUFFERIVDIRECT = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ALCcontext,
        buffer: ALuint,
        param: ALenum,
        values: *const ALint
    )
>;
pub type LPALGETBUFFERFDIRECT = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ALCcontext,
        buffer: ALuint,
        param: ALenum,
        value: *mut ALfloat
    )
>;
pub type LPALGETBUFFER3FDIRECT = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ALCcontext,
        buffer: ALuint,
        param: ALenum,
        value1: *mut ALfloat,
        value2: *mut ALfloat,
        value3: *mut ALfloat
    )
>;
pub type LPALGETBUFFERFVDIRECT = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ALCcontext,
        buffer: ALuint,
        param: ALenum,
        values: *mut ALfloat
    )
>;
pub type LPALGETBUFFERIDIRECT = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ALCcontext,
        buffer: ALuint,
        param: ALenum,
        value: *mut ALint
    )
>;
pub type LPALGETBUFFER3IDIRECT = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ALCcontext,
        buffer: ALuint,
        param: ALenum,
        value1: *mut ALint,
        value2: *mut ALint,
        value3: *mut ALint
    )
>;
pub type LPALGETBUFFERIVDIRECT = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ALCcontext,
        buffer: ALuint,
        param: ALenum,
        values: *mut ALint
    )
>;
pub type LPALGENEFFECTSDIRECT = ::std::option::Option<
    unsafe extern "C" fn(context: *mut ALCcontext, n: ALsizei, effects: *mut ALuint)
>;
pub type LPALDELETEEFFECTSDIRECT = ::std::option::Option<
    unsafe extern "C" fn(context: *mut ALCcontext, n: ALsizei, effects: *const ALuint)
>;
pub type LPALISEFFECTDIRECT = ::std::option::Option<
    unsafe extern "C" fn(context: *mut ALCcontext, effect: ALuint) -> ALboolean
>;
pub type LPALEFFECTIDIRECT = ::std::option::Option<
    unsafe extern "C" fn(context: *mut ALCcontext, effect: ALuint, param: ALenum, value: ALint)
>;
pub type LPALEFFECTIVDIRECT = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ALCcontext,
        effect: ALuint,
        param: ALenum,
        values: *const ALint
    )
>;
pub type LPALEFFECTFDIRECT = ::std::option::Option<
    unsafe extern "C" fn(context: *mut ALCcontext, effect: ALuint, param: ALenum, value: ALfloat)
>;
pub type LPALEFFECTFVDIRECT = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ALCcontext,
        effect: ALuint,
        param: ALenum,
        values: *const ALfloat
    )
>;
pub type LPALGETEFFECTIDIRECT = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ALCcontext,
        effect: ALuint,
        param: ALenum,
        value: *mut ALint
    )
>;
pub type LPALGETEFFECTIVDIRECT = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ALCcontext,
        effect: ALuint,
        param: ALenum,
        values: *mut ALint
    )
>;
pub type LPALGETEFFECTFDIRECT = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ALCcontext,
        effect: ALuint,
        param: ALenum,
        value: *mut ALfloat
    )
>;
pub type LPALGETEFFECTFVDIRECT = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ALCcontext,
        effect: ALuint,
        param: ALenum,
        values: *mut ALfloat
    )
>;
pub type LPALGENFILTERSDIRECT = ::std::option::Option<
    unsafe extern "C" fn(context: *mut ALCcontext, n: ALsizei, filters: *mut ALuint)
>;
pub type LPALDELETEFILTERSDIRECT = ::std::option::Option<
    unsafe extern "C" fn(context: *mut ALCcontext, n: ALsizei, filters: *const ALuint)
>;
pub type LPALISFILTERDIRECT = ::std::option::Option<
    unsafe extern "C" fn(context: *mut ALCcontext, filter: ALuint) -> ALboolean
>;
pub type LPALFILTERIDIRECT = ::std::option::Option<
    unsafe extern "C" fn(context: *mut ALCcontext, filter: ALuint, param: ALenum, value: ALint)
>;
pub type LPALFILTERIVDIRECT = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ALCcontext,
        filter: ALuint,
        param: ALenum,
        values: *const ALint
    )
>;
pub type LPALFILTERFDIRECT = ::std::option::Option<
    unsafe extern "C" fn(context: *mut ALCcontext, filter: ALuint, param: ALenum, value: ALfloat)
>;
pub type LPALFILTERFVDIRECT = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ALCcontext,
        filter: ALuint,
        param: ALenum,
        values: *const ALfloat
    )
>;
pub type LPALGETFILTERIDIRECT = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ALCcontext,
        filter: ALuint,
        param: ALenum,
        value: *mut ALint
    )
>;
pub type LPALGETFILTERIVDIRECT = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ALCcontext,
        filter: ALuint,
        param: ALenum,
        values: *mut ALint
    )
>;
pub type LPALGETFILTERFDIRECT = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ALCcontext,
        filter: ALuint,
        param: ALenum,
        value: *mut ALfloat
    )
>;
pub type LPALGETFILTERFVDIRECT = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ALCcontext,
        filter: ALuint,
        param: ALenum,
        values: *mut ALfloat
    )
>;
pub type LPALGENAUXILIARYEFFECTSLOTSDIRECT = ::std::option::Option<
    unsafe extern "C" fn(context: *mut ALCcontext, n: ALsizei, effectslots: *mut ALuint)
>;
pub type LPALDELETEAUXILIARYEFFECTSLOTSDIRECT = ::std::option::Option<
    unsafe extern "C" fn(context: *mut ALCcontext, n: ALsizei, effectslots: *const ALuint)
>;
pub type LPALISAUXILIARYEFFECTSLOTDIRECT = ::std::option::Option<
    unsafe extern "C" fn(context: *mut ALCcontext, effectslot: ALuint) -> ALboolean
>;
pub type LPALAUXILIARYEFFECTSLOTIDIRECT = ::std::option::Option<
    unsafe extern "C" fn(context: *mut ALCcontext, effectslot: ALuint, param: ALenum, value: ALint)
>;
pub type LPALAUXILIARYEFFECTSLOTIVDIRECT = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ALCcontext,
        effectslot: ALuint,
        param: ALenum,
        values: *const ALint
    )
>;
pub type LPALAUXILIARYEFFECTSLOTFDIRECT = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ALCcontext,
        effectslot: ALuint,
        param: ALenum,
        value: ALfloat
    )
>;
pub type LPALAUXILIARYEFFECTSLOTFVDIRECT = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ALCcontext,
        effectslot: ALuint,
        param: ALenum,
        values: *const ALfloat
    )
>;
pub type LPALGETAUXILIARYEFFECTSLOTIDIRECT = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ALCcontext,
        effectslot: ALuint,
        param: ALenum,
        value: *mut ALint
    )
>;
pub type LPALGETAUXILIARYEFFECTSLOTIVDIRECT = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ALCcontext,
        effectslot: ALuint,
        param: ALenum,
        values: *mut ALint
    )
>;
pub type LPALGETAUXILIARYEFFECTSLOTFDIRECT = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ALCcontext,
        effectslot: ALuint,
        param: ALenum,
        value: *mut ALfloat
    )
>;
pub type LPALGETAUXILIARYEFFECTSLOTFVDIRECT = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ALCcontext,
        effectslot: ALuint,
        param: ALenum,
        values: *mut ALfloat
    )
>;
pub type LPALBUFFERDATASTATICDIRECT = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ALCcontext,
        buffer: ALuint,
        format: ALenum,
        data: *mut ALvoid,
        size: ALsizei,
        freq: ALsizei
    )
>;
pub type LPALDEBUGMESSAGECALLBACKDIRECTEXT = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ALCcontext,
        callback: ALDEBUGPROCEXT,
        userParam: *mut ::std::os::raw::c_void
    )
>;
pub type LPALDEBUGMESSAGEINSERTDIRECTEXT = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ALCcontext,
        source: ALenum,
        type_: ALenum,
        id: ALuint,
        severity: ALenum,
        length: ALsizei,
        message: *const ALchar
    )
>;
pub type LPALDEBUGMESSAGECONTROLDIRECTEXT = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ALCcontext,
        source: ALenum,
        type_: ALenum,
        severity: ALenum,
        count: ALsizei,
        ids: *const ALuint,
        enable: ALboolean
    )
>;
pub type LPALPUSHDEBUGGROUPDIRECTEXT = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ALCcontext,
        source: ALenum,
        id: ALuint,
        length: ALsizei,
        message: *const ALchar
    )
>;
pub type LPALPOPDEBUGGROUPDIRECTEXT =
    ::std::option::Option<unsafe extern "C" fn(context: *mut ALCcontext)>;
pub type LPALGETDEBUGMESSAGELOGDIRECTEXT = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ALCcontext,
        count: ALuint,
        logBufSize: ALsizei,
        sources: *mut ALenum,
        types: *mut ALenum,
        ids: *mut ALuint,
        severities: *mut ALenum,
        lengths: *mut ALsizei,
        logBuf: *mut ALchar
    ) -> ALuint
>;
pub type LPALOBJECTLABELDIRECTEXT = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ALCcontext,
        identifier: ALenum,
        name: ALuint,
        length: ALsizei,
        label: *const ALchar
    )
>;
pub type LPALGETOBJECTLABELDIRECTEXT = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ALCcontext,
        identifier: ALenum,
        name: ALuint,
        bufSize: ALsizei,
        length: *mut ALsizei,
        label: *mut ALchar
    )
>;
pub type LPALGETPOINTERDIRECTEXT = ::std::option::Option<
    unsafe extern "C" fn(context: *mut ALCcontext, pname: ALenum) -> *mut ::std::os::raw::c_void
>;
pub type LPALGETPOINTERVDIRECTEXT = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ALCcontext,
        pname: ALenum,
        values: *mut *mut ::std::os::raw::c_void
    )
>;
pub type LPALREQUESTFOLDBACKSTARTDIRECT = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ALCcontext,
        mode: ALenum,
        count: ALsizei,
        length: ALsizei,
        mem: *mut ALfloat,
        callback: LPALFOLDBACKCALLBACK
    )
>;
pub type LPALREQUESTFOLDBACKSTOPDIRECT =
    ::std::option::Option<unsafe extern "C" fn(context: *mut ALCcontext)>;
pub type LPALBUFFERSUBDATADIRECTSOFT = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ALCcontext,
        buffer: ALuint,
        format: ALenum,
        data: *const ALvoid,
        offset: ALsizei,
        length: ALsizei
    )
>;
pub type LPALSOURCEDDIRECTSOFT = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut ALCcontext, arg2: ALuint, arg3: ALenum, arg4: ALdouble)
>;
pub type LPALSOURCE3DDIRECTSOFT = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ALCcontext,
        arg2: ALuint,
        arg3: ALenum,
        arg4: ALdouble,
        arg5: ALdouble,
        arg6: ALdouble
    )
>;
pub type LPALSOURCEDVDIRECTSOFT = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut ALCcontext, arg2: ALuint, arg3: ALenum, arg4: *const ALdouble)
>;
pub type LPALGETSOURCEDDIRECTSOFT = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut ALCcontext, arg2: ALuint, arg3: ALenum, arg4: *mut ALdouble)
>;
pub type LPALGETSOURCE3DDIRECTSOFT = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ALCcontext,
        arg2: ALuint,
        arg3: ALenum,
        arg4: *mut ALdouble,
        arg5: *mut ALdouble,
        arg6: *mut ALdouble
    )
>;
pub type LPALGETSOURCEDVDIRECTSOFT = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut ALCcontext, arg2: ALuint, arg3: ALenum, arg4: *mut ALdouble)
>;
pub type LPALSOURCEI64DIRECTSOFT = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut ALCcontext, arg2: ALuint, arg3: ALenum, arg4: ALint64SOFT)
>;
pub type LPALSOURCE3I64DIRECTSOFT = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ALCcontext,
        arg2: ALuint,
        arg3: ALenum,
        arg4: ALint64SOFT,
        arg5: ALint64SOFT,
        arg6: ALint64SOFT
    )
>;
pub type LPALSOURCEI64VDIRECTSOFT = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ALCcontext,
        arg2: ALuint,
        arg3: ALenum,
        arg4: *const ALint64SOFT
    )
>;
pub type LPALGETSOURCEI64DIRECTSOFT = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut ALCcontext, arg2: ALuint, arg3: ALenum, arg4: *mut ALint64SOFT)
>;
pub type LPALGETSOURCE3I64DIRECTSOFT = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ALCcontext,
        arg2: ALuint,
        arg3: ALenum,
        arg4: *mut ALint64SOFT,
        arg5: *mut ALint64SOFT,
        arg6: *mut ALint64SOFT
    )
>;
pub type LPALGETSOURCEI64VDIRECTSOFT = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut ALCcontext, arg2: ALuint, arg3: ALenum, arg4: *mut ALint64SOFT)
>;
pub type LPALDEFERUPDATESDIRECTSOFT =
    ::std::option::Option<unsafe extern "C" fn(context: *mut ALCcontext)>;
pub type LPALPROCESSUPDATESDIRECTSOFT =
    ::std::option::Option<unsafe extern "C" fn(context: *mut ALCcontext)>;
pub type LPALGETSTRINGIDIRECTSOFT = ::std::option::Option<
    unsafe extern "C" fn(context: *mut ALCcontext, pname: ALenum, index: ALsizei) -> *const ALchar
>;
pub type LPALEVENTCONTROLDIRECTSOFT = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ALCcontext,
        count: ALsizei,
        types: *const ALenum,
        enable: ALboolean
    )
>;
pub type LPALEVENTCALLBACKDIRECTSOFT = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ALCcontext,
        callback: ALEVENTPROCSOFT,
        userParam: *mut ::std::os::raw::c_void
    )
>;
pub type LPALGETPOINTERDIRECTSOFT = ::std::option::Option<
    unsafe extern "C" fn(context: *mut ALCcontext, pname: ALenum) -> *mut ::std::os::raw::c_void
>;
pub type LPALGETPOINTERVDIRECTSOFT = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ALCcontext,
        pname: ALenum,
        values: *mut *mut ::std::os::raw::c_void
    )
>;
pub type LPALBUFFERCALLBACKDIRECTSOFT = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ALCcontext,
        buffer: ALuint,
        format: ALenum,
        freq: ALsizei,
        callback: ALBUFFERCALLBACKTYPESOFT,
        userptr: *mut ALvoid
    )
>;
pub type LPALGETBUFFERPTRDIRECTSOFT = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ALCcontext,
        buffer: ALuint,
        param: ALenum,
        value: *mut *mut ALvoid
    )
>;
pub type LPALGETBUFFER3PTRDIRECTSOFT = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ALCcontext,
        buffer: ALuint,
        param: ALenum,
        value1: *mut *mut ALvoid,
        value2: *mut *mut ALvoid,
        value3: *mut *mut ALvoid
    )
>;
pub type LPALGETBUFFERPTRVDIRECTSOFT = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ALCcontext,
        buffer: ALuint,
        param: ALenum,
        values: *mut *mut ALvoid
    )
>;
pub type LPALSOURCEPLAYATTIMEDIRECTSOFT = ::std::option::Option<
    unsafe extern "C" fn(context: *mut ALCcontext, source: ALuint, start_time: ALint64SOFT)
>;
pub type LPALSOURCEPLAYATTIMEVDIRECTSOFT = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ALCcontext,
        n: ALsizei,
        sources: *const ALuint,
        start_time: ALint64SOFT
    )
>;
pub type LPEAXSETDIRECT = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ALCcontext,
        property_set_id: *const _GUID,
        property_id: ALuint,
        source_id: ALuint,
        value: *mut ALvoid,
        value_size: ALuint
    ) -> ALenum
>;
pub type LPEAXGETDIRECT = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ALCcontext,
        property_set_id: *const _GUID,
        property_id: ALuint,
        source_id: ALuint,
        value: *mut ALvoid,
        value_size: ALuint
    ) -> ALenum
>;
pub type LPEAXSETBUFFERMODEDIRECT = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ALCcontext,
        n: ALsizei,
        buffers: *const ALuint,
        value: ALint
    ) -> ALboolean
>;
pub type LPEAXGETBUFFERMODEDIRECT = ::std::option::Option<
    unsafe extern "C" fn(context: *mut ALCcontext, buffer: ALuint, pReserved: *mut ALint) -> ALenum
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data {
    pub _address: u8
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_multibyte_data {
    pub _address: u8
}
